{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, createContext } from 'react';\nexport function useCreateContext(defaultValue, reducer) {\n  var defaultDispatch = function defaultDispatch() {\n    return defaultValue;\n  };\n\n  var stateCtx = createContext(defaultValue);\n  var dispatchCtx = createContext(defaultDispatch);\n\n  function useStateCtx(property) {\n    var state = useContext(stateCtx);\n    return state[property]; // only one depth selector for comparison\n  }\n\n  function useDispatchCtx() {\n    return useContext(dispatchCtx);\n  }\n\n  function Provider(_ref) {\n    var children = _ref.children;\n\n    var _React$useReducer = React.useReducer(reducer, defaultValue),\n        _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n        state = _React$useReducer2[0],\n        dispatch = _React$useReducer2[1];\n\n    return __jsx(dispatchCtx.Provider, {\n      value: dispatch\n    }, __jsx(stateCtx.Provider, {\n      value: state\n    }, children));\n  }\n\n  return [useStateCtx, useDispatchCtx, Provider];\n} // const [useTextState, useTextDispatch, TextProvider] = useCreateContext(initialState, reducer);\n// export const TextContext = ctx;\n// export function App() {\n//   return (\n//     <TextProvider>\n//       <Component />\n//     </TextProvider>\n//   )\n// }\n// export function Component() {\n//   const state = useTextState('state')\n//   const dispatch = useTextDispatch()\n// const increment = useCallback(() => dispatch({ type: 'increment' }), [dispatch]);\n//   return (\n//     <div>\n//       {state}\n//       <button onClick={increment}>Toggle</button>\n//     </div>\n//   )\n// }","map":null,"metadata":{},"sourceType":"module"}