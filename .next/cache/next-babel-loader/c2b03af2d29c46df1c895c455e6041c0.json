{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Currency from 'currency.js';\nimport React, { useState, useReducer } from 'react';\nimport { getLocalState, setLocalState } from 'helper/localStorage';\nimport { cartAnimation } from 'helper/utility';\nimport { CartContext } from './cart.context';\nconst initialState = {\n  isOpen: false\n};\n\nfunction reducer(cartState, action) {\n  switch (action.type) {\n    case 'TOGGLE':\n      return _objectSpread({}, cartState, {\n        isOpen: !cartState.isOpen\n      });\n\n    default:\n      return cartState;\n  }\n}\n\nconst getCartProducts = () => {\n  const products = getLocalState('cart');\n  return products ? products : [];\n};\n\nconst getTotalPrice = () => {\n  const price = getLocalState('totalPrice');\n  return price ? price : 0;\n};\n\nconst getCoupon = () => {\n  const coupon = getLocalState('coupon');\n  if (coupon) return coupon;\n  return {\n    id: 0,\n    code: 'DEFAULT_COUPON',\n    discountInPercent: 0\n  };\n};\n\nconst getDiscount = () => {\n  const discount = getLocalState('discount');\n  return discount ? discount : 0;\n};\n\nexport const CartProvider = props => {\n  const {\n    0: cartState,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n  const {\n    0: products,\n    1: setProducts\n  } = useState(getCartProducts());\n  const {\n    0: totalPrice,\n    1: setTotalPrice\n  } = useState(getTotalPrice());\n  const {\n    0: subtotalPrice,\n    1: setSubTotalPrice\n  } = useState(getTotalPrice());\n  const {\n    0: coupon,\n    1: setCoupon\n  } = useState(getCoupon());\n  const {\n    0: discount,\n    1: setDiscount\n  } = useState(getDiscount());\n\n  const setPrice = (coupon = getCoupon()) => {\n    const price = calculateTotalPrice(products, coupon);\n    setLocalState('totalPrice', price);\n    setTotalPrice(price);\n  };\n\n  const calculateTotalPrice = (products, coupon) => {\n    let total = Currency(0);\n    let finalTotal;\n    products.forEach(product => {\n      const quantity = product.quantity ? product.quantity : 1;\n      const price = product.salePrice ? product.salePrice : product.price;\n      const itemPrice = Currency(quantity).multiply(price);\n      total = Currency(total).add(itemPrice);\n    });\n    finalTotal = Number(total.value);\n    setLocalState('subTotalPrice', finalTotal);\n    setSubTotalPrice(finalTotal);\n\n    if (coupon.discountInPercent) {\n      const discount = finalTotal * Number(coupon.discountInPercent) / 100;\n      setLocalState('discount', discount);\n      setDiscount(discount);\n      finalTotal = finalTotal - discount;\n    }\n\n    return finalTotal;\n  };\n\n  const add = (event, item) => {\n    // TODO: cookie storage\n    if (products.length) {\n      const index = products.findIndex(product => product.id === item.id);\n\n      if (index !== -1) {\n        // if product already available in the cart\n        const product = products[index];\n        const quantity = product.quantity ? product.quantity : 0;\n        products[index] = _objectSpread({}, product, {}, item, {\n          quantity: quantity + 1\n        }); // just increase the quantity\n      } else {\n        // if this product is not available in the cart\n        products.push(_objectSpread({}, item, {\n          quantity: 1\n        }));\n      }\n    } else {\n      // if the cart is empty\n      products.push(_objectSpread({}, item, {\n        quantity: 1\n      }));\n    }\n\n    cartAnimation(event);\n    setLocalState('cart', products);\n    setProducts([...products]); // have to use the shallow copy [...products]\n\n    setPrice();\n  };\n\n  const addCoupon = coupon => {\n    setLocalState('coupon', coupon);\n    setCoupon(coupon);\n    setPrice(coupon);\n  };\n\n  const removeCoupon = () => {\n    setLocalState('coupon', {\n      id: 0,\n      code: 'DEFAULT_COUPON',\n      discountInPercent: 0\n    });\n    setLocalState('discount', 0);\n    setCoupon({\n      id: 0,\n      code: 'DEFAULT_COUPON',\n      discountInPercent: 0\n    });\n    setPrice({\n      id: 0,\n      code: 'DEFAULT_COUPON',\n      discountInPercent: 0\n    });\n  };\n\n  const update = (itemId, quantity) => {\n    const index = products.findIndex(product => product.id === itemId);\n\n    if (quantity < 1 && index > -1) {\n      // delete if quantity, 0\n      products.splice(index, 1);\n    } else {\n      // update quanity\n      const product = products[index];\n      products[index] = _objectSpread({}, product, {\n        quantity\n      });\n    }\n\n    setLocalState('cart', products);\n    setProducts([...products]);\n\n    if (!products.length) {\n      setLocalState('coupon', {\n        id: 0,\n        code: 'DEFAULT_COUPON',\n        discountInPercent: 0\n      });\n      setLocalState('discount', 0);\n      setDiscount(0);\n      setCoupon({\n        id: 0,\n        code: 'DEFAULT_COUPON',\n        discountInPercent: 0\n      });\n    }\n\n    setPrice();\n  };\n\n  const clearCart = () => {\n    setLocalState('cart', []);\n    setProducts([]);\n    setLocalState('discount', 0);\n    setDiscount(0);\n    setCoupon({\n      id: 0,\n      code: 'DEFAULT_COUPON',\n      discountInPercent: 0\n    });\n    setLocalState('coupon', {\n      id: 0,\n      code: 'DEFAULT_COUPON',\n      discountInPercent: 0\n    }); // setPrice();\n\n    setLocalState('totalPrice', 0);\n    setTotalPrice(0);\n    setLocalState('subTotalPrice', 0);\n    setSubTotalPrice(0);\n  };\n\n  return __jsx(CartContext.Provider, {\n    value: {\n      cartState,\n      dispatch,\n      products,\n      add,\n      update,\n      totalPrice,\n      addCoupon,\n      coupon,\n      discount,\n      removeCoupon,\n      subtotalPrice,\n      clearCart\n    }\n  }, props.children);\n};","map":null,"metadata":{},"sourceType":"module"}