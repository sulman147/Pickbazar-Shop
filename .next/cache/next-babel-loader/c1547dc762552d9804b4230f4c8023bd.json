{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nimport debounce from './debounce'; // maybe use a hook instead?\n\nfunction useDimensions(liveMeasure = true, delay = 250, initialDimensions = {}) {\n  const {\n    0: dimensions,\n    1: setDimensions\n  } = useState(initialDimensions);\n  const {\n    0: node,\n    1: setNode\n  } = useState(null);\n  const ref = useCallback(newNode => {\n    setNode(newNode);\n  }, []);\n  useEffect(() => {\n    // need ref to continue\n    if (!node) {\n      return;\n    }\n\n    const measure = () => {\n      window.requestAnimationFrame(() => {\n        const newDimensions = node.getBoundingClientRect();\n        setDimensions(newDimensions);\n      });\n    }; // invoke measure right away\n\n\n    measure();\n\n    if (liveMeasure) {\n      const debounceMeasure = debounce(measure, delay);\n\n      if ('ResizeObserver' in window) {\n        const resizeObserver = new ResizeObserver(debounceMeasure);\n        resizeObserver.observe(node);\n        window.addEventListener('scroll', debounceMeasure);\n        return () => {\n          resizeObserver.disconnect();\n          window.removeEventListener('scroll', debounceMeasure);\n        };\n      }\n\n      window.addEventListener('resize', debounceMeasure);\n      window.addEventListener('scroll', debounceMeasure);\n      return () => {\n        window.removeEventListener('resize', debounceMeasure);\n        window.removeEventListener('scroll', debounceMeasure);\n      };\n    }\n  }, [node, liveMeasure, delay]);\n  return [ref, dimensions, node];\n}\n\nexport default useDimensions; // Usage\n// function App() {\n//   const [wrapperRef, dimensions] = useDimensions();\n//   return (\n//     <div ref={wrapperRef}>\n//       height: {dimensions.height}\n//       width: {dimensions.width}\n//     </div>\n//   );\n// }","map":null,"metadata":{},"sourceType":"module"}