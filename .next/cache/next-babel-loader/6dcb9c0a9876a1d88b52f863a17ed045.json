{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, Fragment } from 'react';\nimport InputWrapper, { VerifiedLabel, VerifictionButton } from './Input.style';\nimport { FormattedMessage } from 'react-intl';\n\nconst Input = (_ref) => {\n  let {\n    type,\n    value,\n    label,\n    name,\n    style,\n    disabled,\n    className,\n    onUpdate,\n    placeholder,\n    intlPlaceholderId,\n    intlInputLabelId,\n    onBlur,\n    onFocus,\n    verification,\n    // this prop only for number field\n    verified,\n    // this prop only for number field\n    handleVerification,\n    // this prop only for number field\n    secondaryComponent,\n    searchIcon,\n    iconPosition,\n    containerStyle\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"type\", \"value\", \"label\", \"name\", \"style\", \"disabled\", \"className\", \"onUpdate\", \"placeholder\", \"intlPlaceholderId\", \"intlInputLabelId\", \"onBlur\", \"onFocus\", \"verification\", \"verified\", \"handleVerification\", \"secondaryComponent\", \"searchIcon\", \"iconPosition\", \"containerStyle\"]);\n\n  // Input State\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    value: value\n  }); // Add all classs to an array\n\n  const addAllClasses = ['field-wrapper']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Add disabled class\n\n\n  if (disabled) {\n    addAllClasses.push('disabled');\n  } // Add with search icon class\n\n\n  if (searchIcon) {\n    addAllClasses.push('with-search-icon');\n  }\n\n  if (verification) {\n    verified ? addAllClasses.push('number-verified') : addAllClasses.push('send-verification');\n  } // Input onChange handler\n\n\n  const handleOnChange = e => {\n    let currentValue = e.target.value;\n    setState(_objectSpread({}, state, {\n      value: currentValue\n    }));\n    onUpdate(currentValue);\n  }; // Init variable for Label For and Input element\n\n\n  let htmlFor, inputElement; // Make Label value to htmlFor\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // set icon position\n\n\n  const position = iconPosition || 'left';\n\n  const SearchIcon = searchIcon && __jsx(\"span\", {\n    className: `${position === 'right' ? 'right' : 'left'} search-icon`\n  }, searchIcon);\n\n  const withSearchIconClass = searchIcon && position === 'right' ? 'icon-right' : position === 'left' ? 'icon-left' : ''; // Label Field\n\n  const LabelField = label && __jsx(\"label\", {\n    htmlFor: htmlFor\n  }, __jsx(FormattedMessage, {\n    id: intlInputLabelId ? intlInputLabelId : 'defaultIntlInputLabelId',\n    defaultMessage: label\n  })); // Set Input element based on type prop\n\n\n  switch (type) {\n    case 'textarea':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, placeholder => __jsx(\"textarea\", _extends({\n        id: htmlFor,\n        name: name,\n        disabled: disabled,\n        value: value ? value : state.value,\n        onChange: handleOnChange,\n        placeholder: placeholder,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style\n      }, rest))));\n      break;\n\n    case 'number':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, placeholder => __jsx(\"input\", _extends({\n        type: \"number\",\n        id: htmlFor,\n        name: name,\n        disabled: disabled,\n        value: value ? value : state.value,\n        onChange: handleOnChange,\n        placeholder: placeholder,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style\n      }, rest))), verification && __jsx(Fragment, null, verified ? __jsx(VerifiedLabel, null, __jsx(FormattedMessage, {\n        id: \"inputVerified\",\n        defaultMessage: \"Verified\"\n      })) : __jsx(VerifictionButton, {\n        onClick: handleVerification\n      }, __jsx(FormattedMessage, {\n        id: \"inputSendVerification\",\n        defaultMessage: \"Send Verification\"\n      }))));\n      break;\n\n    case 'password':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, placeholder => __jsx(\"input\", {\n        type: \"password\",\n        id: htmlFor,\n        name: name,\n        disabled: disabled,\n        value: value ? value : state.value,\n        onChange: handleOnChange // placeholder={placeholder}\n        ,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style\n      })));\n      break;\n\n    case 'email':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, placeholder => __jsx(\"input\", _extends({\n        type: \"email\",\n        id: htmlFor,\n        name: name,\n        disabled: disabled,\n        value: value ? value : state.value,\n        onChange: handleOnChange,\n        placeholder: placeholder,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style\n      }, rest))));\n      break;\n\n    default:\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, position === 'left' && SearchIcon, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, placeholder => __jsx(\"input\", _extends({\n        type: \"text\",\n        id: htmlFor,\n        name: name,\n        value: value ? value : state.value,\n        onChange: handleOnChange,\n        placeholder: placeholder,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style,\n        className: withSearchIconClass\n      }, rest))), position === 'right' && SearchIcon);\n      break;\n  }\n\n  return __jsx(InputWrapper, {\n    className: addAllClasses.join(' '),\n    style: containerStyle\n  }, LabelField || secondaryComponent ? __jsx(\"div\", null, LabelField, \" \", secondaryComponent) : '', inputElement);\n};\n\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}