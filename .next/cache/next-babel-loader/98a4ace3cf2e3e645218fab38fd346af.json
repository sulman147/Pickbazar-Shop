{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { CartContext } from 'contexts/cart/cart.context';\nimport Image from 'components/Image/Image';\nimport Button from '../Button/Button';\nimport InputIncDec from '../InputIncDec/InputIncDec';\nimport { CartIcon } from '../AllSvgIcon';\nimport { ProductCardWrapper, ProductImageWrapper, ProductInfo, DiscountPercent } from './ProductCard.style';\nimport { getProductQuantity, findProductIndex } from '../helpers/utility';\n\nconst ProductCard = (_ref) => {\n  let {\n    title,\n    image,\n    weight,\n    price,\n    salePrice,\n    discountInPercent,\n    cartProducts,\n    addToCart,\n    updateCart,\n    value,\n    currency,\n    onChange,\n    increment,\n    decrement,\n    data,\n    deviceType,\n    onClick\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"title\", \"image\", \"weight\", \"price\", \"salePrice\", \"discountInPercent\", \"cartProducts\", \"addToCart\", \"updateCart\", \"value\", \"currency\", \"onChange\", \"increment\", \"decrement\", \"data\", \"deviceType\", \"onClick\"]);\n\n  const {\n    add,\n    update,\n    products\n  } = React.useContext(CartContext);\n  const index = data && data.id ? findProductIndex(products, data.id) : -1;\n  const quantity = getProductQuantity(products, index);\n\n  const handleClick = e => {\n    e.stopPropagation();\n    add(e, data);\n  };\n\n  const handleUpdate = (value, e) => {\n    if (index === -1 && value === 1) {\n      add(e, data);\n    } else {\n      update(data.id, value);\n    }\n  };\n\n  return __jsx(ProductCardWrapper, {\n    onClick: onClick,\n    className: \"product-card\"\n  }, __jsx(ProductImageWrapper, null, __jsx(Image, {\n    url: image,\n    className: \"product-image\",\n    style: {\n      position: 'relative'\n    },\n    alt: title\n  }), discountInPercent ? __jsx(React.Fragment, null, __jsx(DiscountPercent, null, discountInPercent, \"%\")) : ''), __jsx(ProductInfo, null, __jsx(\"h3\", {\n    className: \"product-title\"\n  }, title), __jsx(\"span\", {\n    className: \"product-weight\"\n  }, weight), __jsx(\"div\", {\n    className: \"product-meta\"\n  }, __jsx(\"div\", {\n    className: \"productPriceWrapper\"\n  }, discountInPercent ? __jsx(\"span\", {\n    className: \"discountedPrice\"\n  }, currency, price) : '', __jsx(\"span\", {\n    className: \"product-price\"\n  }, currency, salePrice ? salePrice : price)), quantity <= 0 ? __jsx(Button, {\n    title: \"Cart\",\n    intlButtonId: \"addCartButton\",\n    iconPosition: \"left\",\n    colors: \"primary\",\n    size: \"small\",\n    variant: \"outlined\",\n    className: \"cart-button\",\n    icon: __jsx(CartIcon, null),\n    onClick: e => handleClick(e)\n  }) : __jsx(InputIncDec, {\n    value: quantity,\n    onClick: e => {\n      e.stopPropagation(onclick);\n    },\n    onUpdate: (value, e) => handleUpdate(value, e)\n  }))));\n};\n\nexport default ProductCard;","map":null,"metadata":{},"sourceType":"module"}