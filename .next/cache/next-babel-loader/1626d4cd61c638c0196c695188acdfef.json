{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Web Work\\\\pickbazar\\\\packages\\\\shop\\\\components\\\\Popover\\\\Popover.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport PopoverWrapper from './Popover.style';\n\nconst Popover = ({\n  className,\n  handler,\n  content,\n  direction\n}) => {\n  // Popover State\n  const {\n    0: state,\n    1: setState\n  } = useState(false); // Add all classs to an array\n\n  const addAllClasses = ['popover-wrapper']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Add direction class on popover content\n\n\n  if (direction) {\n    addAllClasses.push(direction);\n  } // Toggle Popover content\n\n\n  const handleToggle = e => {\n    e.stopPropagation();\n    setState(state => !state);\n  }; // Handle document click\n\n\n  const handleDocumentClick = e => {\n    e.stopPropagation();\n\n    if (state) {\n      handleToggle(e);\n    }\n  }; // Handle window event listener\n\n\n  useEffect(() => {\n    window.addEventListener('click', handleDocumentClick);\n    return () => {\n      window.removeEventListener('click', handleDocumentClick);\n    };\n  });\n  return __jsx(PopoverWrapper, {\n    className: addAllClasses.join(' '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"popover-handler\",\n    onClick: handleToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, handler), state && __jsx(\"div\", {\n    className: \"popover-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, content && __jsx(\"div\", {\n    className: \"inner-wrap\",\n    onClick: handleToggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, content)));\n};\n\nexport default Popover;","map":{"version":3,"sources":["E:/React Web Work/pickbazar/packages/shop/components/Popover/Popover.tsx"],"names":["React","useState","useEffect","PopoverWrapper","Popover","className","handler","content","direction","state","setState","addAllClasses","push","handleToggle","e","stopPropagation","handleDocumentClick","window","addEventListener","removeEventListener","join"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,iBAA3B;;AAUA,MAAMC,OAA+B,GAAG,CAAC;AACvCC,EAAAA,SADuC;AAEvCC,EAAAA,OAFuC;AAGvCC,EAAAA,OAHuC;AAIvCC,EAAAA;AAJuC,CAAD,KAKlC;AACJ;AACA,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,CAAC,KAAD,CAAlC,CAFI,CAIJ;;AACA,QAAMU,aAAuB,GAAG,CAAC,iBAAD,CAAhC,CALI,CAOJ;;AACA,MAAIN,SAAJ,EAAe;AACbM,IAAAA,aAAa,CAACC,IAAd,CAAmBP,SAAnB;AACD,GAVG,CAYJ;;;AACA,MAAIG,SAAJ,EAAe;AACbG,IAAAA,aAAa,CAACC,IAAd,CAAmBJ,SAAnB;AACD,GAfG,CAiBJ;;;AACA,QAAMK,YAAY,GAAGC,CAAC,IAAI;AACxBA,IAAAA,CAAC,CAACC,eAAF;AACAL,IAAAA,QAAQ,CAACD,KAAK,IAAI,CAACA,KAAX,CAAR;AACD,GAHD,CAlBI,CAuBJ;;;AACA,QAAMO,mBAAmB,GAAGF,CAAC,IAAI;AAC/BA,IAAAA,CAAC,CAACC,eAAF;;AACA,QAAIN,KAAJ,EAAW;AACTI,MAAAA,YAAY,CAACC,CAAD,CAAZ;AACD;AACF,GALD,CAxBI,CA+BJ;;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,mBAAjC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,mBAApC;AACD,KAFD;AAGD,GALQ,CAAT;AAOA,SACE,MAAC,cAAD;AAAgB,IAAA,SAAS,EAAEL,aAAa,CAACS,IAAd,CAAmB,GAAnB,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAiC,IAAA,OAAO,EAAEP,YAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGP,OADH,CADF,EAIGG,KAAK,IACJ;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,IACN;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,OAAO,EAAEM,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,OADH,CAFJ,CALJ,CADF;AAgBD,CA5DD;;AA8DA,eAAeH,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PopoverWrapper from './Popover.style';\n\ntype PopoverProps = {\n  className?: string;\n  handler: React.ReactNode;\n  content: React.ReactNode;\n  direction?: 'left' | 'right';\n  handleToggle?: () => void;\n};\n\nconst Popover: React.FC<PopoverProps> = ({\n  className,\n  handler,\n  content,\n  direction,\n}) => {\n  // Popover State\n  const [state, setState] = useState(false);\n\n  // Add all classs to an array\n  const addAllClasses: string[] = ['popover-wrapper'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // Add direction class on popover content\n  if (direction) {\n    addAllClasses.push(direction);\n  }\n\n  // Toggle Popover content\n  const handleToggle = e => {\n    e.stopPropagation();\n    setState(state => !state);\n  };\n\n  // Handle document click\n  const handleDocumentClick = e => {\n    e.stopPropagation();\n    if (state) {\n      handleToggle(e);\n    }\n  };\n\n  // Handle window event listener\n  useEffect(() => {\n    window.addEventListener('click', handleDocumentClick);\n    return () => {\n      window.removeEventListener('click', handleDocumentClick);\n    };\n  });\n\n  return (\n    <PopoverWrapper className={addAllClasses.join(' ')}>\n      <div className='popover-handler' onClick={handleToggle}>\n        {handler}\n      </div>\n      {state && (\n        <div className='popover-content'>\n          {content && (\n            <div className='inner-wrap' onClick={handleToggle}>\n              {content}\n            </div>\n          )}\n        </div>\n      )}\n    </PopoverWrapper>\n  );\n};\n\nexport default Popover;\n"]},"metadata":{},"sourceType":"module"}