{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport gql from 'graphql-tag';\nimport ProductCard from 'components/ProductCard/ProductCardBook';\nimport { ProductsRow, ProductsCol, ButtonWrapper, LoaderWrapper, LoaderItem, ProductCardWrapper } from './Products.style';\nimport { useQuery } from '@apollo/react-hooks';\nimport Button from 'components/Button/Button';\nimport Loader from 'components/Loader/Loader';\nimport Placeholder from 'components/Placeholder/Placeholder';\nimport Fade from 'react-reveal/Fade';\nimport NoResultFound from 'components/NoResult/NoResult';\nconst GET_PRODUCTS = gql`\n  query getProducts(\n    $type: String\n    $text: String\n    $category: String\n    $offset: Int\n    $limit: Int\n  ) {\n    products(\n      type: $type\n      text: $text\n      category: $category\n      offset: $offset\n      limit: $limit\n    ) {\n      items {\n        id\n        title\n        slug\n        price\n        salePrice\n        discountInPercent\n        type\n        image\n        author {\n          id\n          name\n        }\n      }\n      hasMore\n    }\n  }\n`;\nexport const Products = ({\n  deviceType,\n  type,\n  fetchLimit = 8,\n  loadMore = true\n}) => {\n  const router = useRouter();\n  const {\n    0: loadingMore,\n    1: toggleLoading\n  } = useState(false);\n  const {\n    data,\n    error,\n    loading,\n    fetchMore\n  } = useQuery(GET_PRODUCTS, {\n    variables: {\n      type: type,\n      text: router.query.text,\n      category: router.query.category,\n      offset: 0,\n      limit: fetchLimit\n    }\n  });\n\n  if (loading) {\n    return __jsx(LoaderWrapper, null, __jsx(LoaderItem, null, __jsx(Placeholder, null)), __jsx(LoaderItem, null, __jsx(Placeholder, null)), __jsx(LoaderItem, null, __jsx(Placeholder, null)));\n  }\n\n  if (error) return __jsx(\"div\", null, error.message);\n\n  if (!data || !data.products || data.products.items.length === 0) {\n    return __jsx(NoResultFound, null);\n  }\n\n  const handleLoadMore = () => {\n    toggleLoading(true);\n    fetchMore({\n      variables: {\n        offset: Number(data.products.items.length),\n        limit: fetchLimit\n      },\n      updateQuery: (prev, {\n        fetchMoreResult\n      }) => {\n        toggleLoading(false);\n\n        if (!fetchMoreResult) {\n          return prev;\n        }\n\n        return {\n          products: {\n            __typename: prev.products.__typename,\n            items: [...prev.products.items, ...fetchMoreResult.products.items],\n            hasMore: fetchMoreResult.products.hasMore\n          }\n        };\n      }\n    });\n  };\n\n  return __jsx(React.Fragment, null, __jsx(ProductsRow, null, data.products.items.map((item, index) => {\n    var _item$author;\n\n    return __jsx(ProductsCol, {\n      key: index,\n      style: {\n        paddingLeft: 0,\n        paddingRight: 1\n      }\n    }, __jsx(ProductCardWrapper, null, __jsx(Fade, {\n      duration: 800,\n      delay: index * 10,\n      style: {\n        height: '100%'\n      }\n    }, __jsx(ProductCard, {\n      title: item.title,\n      image: item.image,\n      name: item === null || item === void 0 ? void 0 : (_item$author = item.author) === null || _item$author === void 0 ? void 0 : _item$author.name,\n      data: item,\n      deviceType: deviceType,\n      onClick: () => router.push('/product/[slug]', `/product/${item.slug}`)\n    }))));\n  })), loadMore && data.products.hasMore && __jsx(ButtonWrapper, null, __jsx(Button, {\n    onClick: handleLoadMore,\n    title: \"Load More\",\n    size: \"small\",\n    isLoading: loadingMore,\n    intlButtonId: \"loadMoreBtn\",\n    loader: __jsx(Loader, {\n      color: \"#009E7F\"\n    }),\n    style: {\n      minWidth: 135,\n      backgroundColor: '#ffffff',\n      border: '1px solid #f1f1f1',\n      color: '#009E7F'\n    }\n  })));\n};\nexport default Products;","map":null,"metadata":{},"sourceType":"module"}