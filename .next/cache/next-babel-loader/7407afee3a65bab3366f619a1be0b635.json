{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport { DrawerProvider } from 'contexts/drawer/drawer.provider';\nimport Popover from 'components/Popover/Popover';\nimport MobileDrawer from './MobileDrawer';\nimport { MobileHeaderWrapper, MobileHeaderInnerWrapper, DrawerWrapper, LogoWrapper, SearchWrapper, SearchModalWrapper, SearchModalClose, Logo, SelectedLang, LanguageItem, LangSwithcer, Flag } from './Header.style';\nimport { FormattedMessage } from 'react-intl';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport { SearchContext } from 'contexts/search/search.context';\nimport Logoimage from 'image/logo.svg';\nimport { HOME_PAGE, GROCERY_PAGE, MAKEUP_PAGE, CLOTHING, BAGS_PAGE, FURNITURE_PAGE, BOOK_PAGE } from 'constants/navigation';\nimport LanguageContext from 'contexts/language/language.context';\nimport { SearchIcon, LongArrowLeft, DEFlag, CNFlag, USFlag, ILFlag, ESFlag, SAFlag } from 'components/AllSvgIcon';\nvar LanguageArray = [{\n  id: 'ar',\n  label: 'Arabic',\n  intlLangName: 'intlArabic',\n  icon: __jsx(SAFlag, null)\n}, {\n  id: 'zh',\n  label: 'Chinese',\n  intlLangName: 'intlChinese',\n  icon: __jsx(CNFlag, null)\n}, {\n  id: 'en',\n  label: 'English',\n  intlLangName: 'intlEnglish',\n  icon: __jsx(USFlag, null)\n}, {\n  id: 'de',\n  label: 'German',\n  intlLangName: 'intlGerman',\n  icon: __jsx(DEFlag, null)\n}, {\n  id: 'he',\n  label: 'Hebrew',\n  intlLangName: 'intlHebrew',\n  icon: __jsx(ILFlag, null)\n}, {\n  id: 'es',\n  label: 'Spanish',\n  intlLangName: 'intlSpanish',\n  icon: __jsx(ESFlag, null)\n}];\n\nvar SearchModal = function SearchModal(_ref) {\n  var state = _ref.state,\n      pathname = _ref.pathname,\n      handleSearch = _ref.handleSearch;\n  var router = useRouter();\n\n  var _useState = useState(state.text || ''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var handleSearchInput = function handleSearchInput(text) {\n    setText(text);\n  };\n\n  var page = state.page,\n      urlState = _objectWithoutProperties(state, [\"page\"]);\n\n  var handleClickSearchButton = function handleClickSearchButton() {\n    handleSearch(text);\n    router.push({\n      pathname: pathname === '/' ? '/grocery' : pathname,\n      query: _objectSpread({}, urlState, {\n        text: text\n      })\n    });\n    closeModal();\n  };\n\n  return __jsx(SearchModalWrapper, null, __jsx(SearchModalClose, {\n    type: \"submit\",\n    onClick: function onClick() {\n      return closeModal();\n    }\n  }, __jsx(LongArrowLeft, null)), __jsx(SearchBox, {\n    className: \"header-modal-search\",\n    bordered: false,\n    inputStyle: {\n      height: 35\n    },\n    buttonText: \"\",\n    placeholder: \"Search\",\n    handleSearch: handleSearchInput,\n    value: text,\n    onClick: handleClickSearchButton\n  }));\n};\n\nvar MobileHeader = function MobileHeader(props) {\n  var _useContext = useContext(LanguageContext),\n      lang = _useContext.state.lang,\n      toggleLanguage = _useContext.toggleLanguage;\n\n  var _useContext2 = useContext(SearchContext),\n      state = _useContext2.state,\n      dispatch = _useContext2.dispatch;\n\n  var className = props.className,\n      pathname = props.pathname,\n      closeSearch = props.closeSearch;\n  var selectedLangindex = LanguageArray.findIndex(function (x) {\n    return x.id === lang;\n  });\n\n  var handleSearch = function handleSearch(text) {\n    dispatch({\n      type: 'UPDATE',\n      payload: _objectSpread({}, state, {\n        text: text\n      })\n    });\n  };\n\n  var handleSearchModal = function handleSearchModal() {\n    openModal({\n      show: true,\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'search-modal-mobile',\n        width: '100%',\n        height: '100%'\n      },\n      closeOnClickOutside: false,\n      component: SearchModal,\n      componentProps: {\n        state: state,\n        pathname: pathname,\n        handleSearch: handleSearch\n      },\n      closeComponent: function closeComponent() {\n        return __jsx(\"div\", null);\n      }\n    });\n  };\n\n  var handleToggleLanguage = function handleToggleLanguage(e) {\n    toggleLanguage(e.target.value);\n    console.log(e.target.value, 'switcher');\n  };\n\n  var LanguageMenu = function LanguageMenu(item) {\n    return __jsx(LanguageItem, {\n      onClick: handleToggleLanguage,\n      key: item.id,\n      value: item.id\n    }, __jsx(\"span\", null, item.icon), __jsx(FormattedMessage, {\n      id: item.intlLangName,\n      defaultMessage: item.label\n    }));\n  };\n\n  var isHomePage = pathname === HOME_PAGE || pathname === GROCERY_PAGE || pathname === CLOTHING || pathname === MAKEUP_PAGE || pathname === BOOK_PAGE || pathname === FURNITURE_PAGE || pathname === BAGS_PAGE;\n  return __jsx(DrawerProvider, null, __jsx(MobileHeaderWrapper, null, __jsx(MobileHeaderInnerWrapper, {\n    className: className\n  }, __jsx(DrawerWrapper, null, __jsx(MobileDrawer, null)), __jsx(LogoWrapper, null, __jsx(Logo, null, __jsx(Link, {\n    href: HOME_PAGE\n  }, __jsx(\"a\", null, __jsx(\"img\", {\n    src: Logoimage,\n    alt: \"pickbazar-admin\"\n  }))))), __jsx(LangSwithcer, null, __jsx(Popover, {\n    className: \"right\",\n    handler: __jsx(SelectedLang, null, __jsx(Flag, {\n      style: {\n        margin: 0\n      }\n    }, LanguageArray[selectedLangindex].icon)),\n    content: __jsx(React.Fragment, null, LanguageArray.map(LanguageMenu))\n  })), isHomePage ? __jsx(SearchWrapper, {\n    onClick: handleSearchModal,\n    className: \"searchIconWrapper\"\n  }, __jsx(SearchIcon, null)) : null)));\n};\n\nexport default MobileHeader;","map":null,"metadata":{},"sourceType":"module"}