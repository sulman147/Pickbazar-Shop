{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useCallback } from 'react';\nimport { useRouter } from 'next/router';\nimport { Waypoint } from 'react-waypoint';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport { SearchContext } from 'contexts/search/search.context';\nimport { useStickyDispatch } from 'contexts/app/app.provider';\nimport { FormattedMessage } from 'react-intl';\nimport { BannerWrapper, BannerHeading, BannerSubHeading, BannerComponent } from './Banner.style';\n\nconst Banner = ({\n  imageUrl,\n  intlTitleId,\n  intlDescriptionId\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  const router = useRouter();\n  const {\n    text\n  } = state;\n  const {\n    pathname\n  } = router;\n\n  const handleSearchInput = text => {\n    dispatch({\n      type: 'UPDATE',\n      payload: _objectSpread({}, state, {\n        text\n      })\n    });\n  };\n\n  function handleClickSearchButton() {\n    const {\n      page\n    } = state,\n          urlState = _objectWithoutProperties(state, [\"page\"]);\n\n    router.push({\n      pathname: pathname,\n      query: _objectSpread({}, urlState, {\n        text\n      })\n    }, {\n      pathname: pathname === '/' ? `${pathname}grocery` : pathname,\n      query: _objectSpread({}, urlState, {\n        text\n      })\n    }, {\n      shallow: true\n    });\n  }\n\n  const useDispatch = useStickyDispatch();\n  const setSticky = useCallback(() => useDispatch({\n    type: 'SET_STICKY'\n  }), [useDispatch]);\n  const removeSticky = useCallback(() => useDispatch({\n    type: 'REMOVE_STICKY'\n  }), [useDispatch]);\n\n  const onWaypointPositionChange = ({\n    currentPosition\n  }) => {\n    if (!currentPosition || currentPosition === 'above') {\n      setSticky();\n    }\n  };\n\n  return __jsx(BannerWrapper, {\n    style: {\n      backgroundImage: `url(${imageUrl})`\n    }\n  }, __jsx(BannerComponent, null, __jsx(BannerHeading, null, __jsx(FormattedMessage, {\n    id: intlTitleId,\n    defaultMessage: \"Set Your Title Through Language File\"\n  })), __jsx(BannerSubHeading, null, __jsx(FormattedMessage, {\n    id: intlDescriptionId,\n    defaultMessage: \"Set Your Description Through Language File\"\n  })), __jsx(SearchBox, {\n    style: {\n      width: 700,\n      boxShadow: '0 21px 36px rgba(0,0,0,0.05)',\n      borderRadius: '6px',\n      overflow: 'hidden'\n    },\n    handleSearch: value => handleSearchInput(value),\n    value: state.text || '',\n    onClick: handleClickSearchButton,\n    className: \"banner-search\",\n    pathname: pathname\n  }), __jsx(Waypoint, {\n    onEnter: removeSticky,\n    onLeave: setSticky,\n    onPositionChange: onWaypointPositionChange\n  })));\n};\n\nexport default Banner;","map":null,"metadata":{},"sourceType":"module"}