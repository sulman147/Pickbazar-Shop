{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState, useEffect } from 'react';\nimport Router from 'next/router';\nimport gql from 'graphql-tag';\nimport Button from 'components/Button/Button';\nimport RadioCard from 'components/RadioCard/RadioCard';\nimport RadioGroup from 'components/RadioGroup/RadioGroup';\nimport PaymentGroup from 'components/PaymentGroup/PaymentGroup';\nimport Loader from 'components/Loader/Loader';\nimport UpdateAddress from './Update/UpdateAddress';\nimport UpdateContact from './Update/UpdateContact';\nimport StripePaymentForm from '../Payment/StripePaymentForm';\nimport { DELETE_ADDRESS } from 'graphql/mutation/address';\nimport { DELETE_CARD } from 'graphql/mutation/card';\nimport { DELETE_CONTACT } from 'graphql/mutation/contact';\nimport { openModal } from '@redq/reuse-modal';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CartContext } from 'contexts/cart/cart.context';\nimport CheckcoutWrapper, { CheckoutContainer, OrderSummary, OrderSummaryItem, OrderLabel, OrderAmount, DeliverySchedule, Heading, DeliveryAddress, ButtonGroup, Contact, PaymentOption, CheckoutSubmit, CouponBoxWrapper, ErrorMsg } from './Checkout.style';\nimport { getCartProducts, getSubTotalPrice, getTotalPrice, getDiscount, getCoupon } from '../../helper/utility';\nimport CouponBox, { CouponDisplay } from 'components/CouponBox/CouponBox';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage } from 'react-intl'; // The type of props Checkout Form receives\n\nconst APPLY_COUPON = gql`\n  mutation applyCoupon($code: String!) {\n    applyCoupon(code: $code) {\n      id\n      code\n      discountInPercent\n    }\n  }\n`;\n\nconst Checkout = ({\n  token,\n  deviceType\n}) => {\n  const {\n    0: couponCode,\n    1: setCouponCode\n  } = useState('');\n  const {\n    0: couponError,\n    1: setError\n  } = useState('');\n  const {\n    0: processedDiscount,\n    1: setProcessedDiscount\n  } = useState(getDiscount());\n  const {\n    0: processedCoupon,\n    1: setProcessedCoupon\n  } = useState(getCoupon());\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n  const {\n    removeCoupon,\n    discount,\n    coupon,\n    addCoupon,\n    clearCart\n  } = useContext(CartContext);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: isValid,\n    1: setIsValid\n  } = useState(false);\n  const {\n    address,\n    contact,\n    card,\n    schedules\n  } = state;\n  const items = getCartProducts();\n  const subTotalPrice = getSubTotalPrice();\n  const totalPrice = getTotalPrice();\n  const [deleteContactMutation] = useMutation(DELETE_CONTACT);\n  const [deleteAddressMutation] = useMutation(DELETE_ADDRESS);\n  const [deletePaymentCardMutation] = useMutation(DELETE_CARD);\n  const [applyedCoupon] = useMutation(APPLY_COUPON);\n\n  const handleSubmit = async () => {\n    setLoading(true);\n\n    if (isValid) {\n      clearCart();\n      Router.push('/order-recived');\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    setProcessedDiscount(discount);\n    setProcessedCoupon(coupon);\n  }, [coupon]);\n  useEffect(() => {\n    if (totalPrice > 0 && items.length > 0 && address.length && contact.length && card.length && schedules.length) {\n      setIsValid(true);\n    }\n  }, [state]); // Add or edit modal\n\n  const handleModal = (modalComponent, modalProps = {}, className = 'add-address-modal') => {\n    openModal({\n      show: true,\n      config: {\n        width: 360,\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        className: className\n      },\n      closeOnClickOutside: true,\n      component: modalComponent,\n      componentProps: {\n        item: modalProps\n      }\n    });\n  };\n\n  const handleEditDelete = async (item, type, name) => {\n    if (type === 'edit') {\n      const modalComponent = name === 'address' ? UpdateAddress : UpdateContact;\n      handleModal(modalComponent, item);\n    } else {\n      switch (name) {\n        case 'payment':\n          dispatch({\n            type: 'DELETE_CARD',\n            payload: item.id\n          });\n          return await deletePaymentCardMutation({\n            variables: {\n              cardId: JSON.stringify(item.id)\n            }\n          });\n\n        case 'contact':\n          dispatch({\n            type: 'DELETE_CONTACT',\n            payload: item.id\n          });\n          return await deleteContactMutation({\n            variables: {\n              contactId: JSON.stringify(item.id)\n            }\n          });\n\n        case 'address':\n          dispatch({\n            type: 'DELETE_ADDRESS',\n            payload: item.id\n          });\n          return await deleteAddressMutation({\n            variables: {\n              addressId: JSON.stringify(item.id)\n            }\n          });\n\n        default:\n          return false;\n      }\n    }\n  };\n\n  const handleApplyCoupon = async () => {\n    const {\n      data: {\n        applyCoupon\n      }\n    } = await applyedCoupon({\n      variables: {\n        code: couponCode\n      }\n    });\n\n    if (applyCoupon && applyCoupon.discountInPercent) {\n      addCoupon(applyCoupon);\n      setCouponCode('');\n    } else {\n      setError('Invalid Coupon');\n    }\n  };\n\n  const handleOnUpdate = couponCode => {\n    setCouponCode(couponCode);\n  };\n\n  return __jsx(\"form\", null, __jsx(CheckcoutWrapper, null, __jsx(CheckoutContainer, null, __jsx(OrderSummary, null, __jsx(OrderSummaryItem, {\n    style: {\n      marginBottom: 15\n    }\n  }, __jsx(OrderLabel, null, __jsx(FormattedMessage, {\n    id: \"subTotal\",\n    defaultMessage: \"Subtotal\"\n  }), \" (\", items.length, ' ', __jsx(FormattedMessage, {\n    id: \"itemsText\",\n    defaultMessage: \"items\"\n  }), \")\"), __jsx(OrderAmount, null, \"$\", subTotalPrice || 0)), __jsx(OrderSummaryItem, {\n    style: {\n      marginBottom: 30\n    }\n  }, __jsx(OrderLabel, null, __jsx(FormattedMessage, {\n    id: \"shippinFeeText\",\n    defaultMessage: \"Shipping Fee\"\n  })), __jsx(OrderAmount, null, \"$0\")), __jsx(OrderSummaryItem, {\n    style: {\n      marginBottom: 30\n    },\n    className: \"voucherWrapper\"\n  }, __jsx(OrderLabel, null, __jsx(FormattedMessage, {\n    id: \"voucherText\",\n    defaultMessage: \"Voucher\"\n  })), processedDiscount && processedCoupon.code !== 'DEFAULT_COUPON' ? __jsx(CouponDisplay, {\n    code: processedCoupon.code,\n    sign: \"-\",\n    currency: \"$\",\n    price: discount,\n    onClick: e => {\n      e.preventDefault();\n      removeCoupon();\n    }\n  }) : __jsx(React.Fragment, null, __jsx(CouponBoxWrapper, null, __jsx(CouponBox, {\n    buttonTitle: \"Apply\",\n    intlCouponBoxPlaceholder: \"couponPlaceholder\",\n    onClick: handleApplyCoupon,\n    value: couponCode,\n    onUpdate: handleOnUpdate,\n    style: {\n      maxWidth: 350,\n      height: 50\n    },\n    intlCouponApplyButton: \"voucherApply\"\n  }), couponError && __jsx(ErrorMsg, null, __jsx(FormattedMessage, {\n    id: \"couponError\",\n    defaultMessage: couponError\n  }))))), __jsx(OrderSummaryItem, null, __jsx(OrderLabel, null, __jsx(FormattedMessage, {\n    id: \"totalText\",\n    defaultMessage: \"Total\"\n  })), __jsx(OrderAmount, null, \"$\", totalPrice))), __jsx(DeliverySchedule, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"deliverySchedule\",\n    defaultMessage: \"Select Your Delivery Schedule\"\n  })), __jsx(RadioGroup, {\n    items: schedules,\n    component: item => __jsx(RadioCard, {\n      id: item.id,\n      key: item.id,\n      title: item.title,\n      content: item.time_slot,\n      name: \"schedule\",\n      checked: item.type === 'primary',\n      withActionButtons: false,\n      onChange: () => dispatch({\n        type: 'SET_PRIMARY_SCHEDULE',\n        payload: item.id.toString()\n      })\n    })\n  })), __jsx(DeliveryAddress, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"checkoutDeliveryAddress\",\n    defaultMessage: \"Select Your Delivery Address\"\n  })), __jsx(ButtonGroup, null, __jsx(RadioGroup, {\n    items: address,\n    component: item => __jsx(RadioCard, {\n      id: item.id,\n      key: item.id,\n      title: item.name,\n      content: item.info,\n      name: \"address\",\n      checked: item.type === 'primary',\n      onChange: () => dispatch({\n        type: 'SET_PRIMARY_ADDRESS',\n        payload: item.id.toString()\n      }),\n      onEdit: () => handleEditDelete(item, 'edit', 'address'),\n      onDelete: () => handleEditDelete(item, 'delete', 'address')\n    }),\n    secondaryComponent: __jsx(Button, {\n      title: \"Add Adderss\",\n      iconPosition: \"right\",\n      colors: \"primary\",\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      intlButtonId: \"addAddressBtn\",\n      onClick: () => handleModal(UpdateAddress, 'add-address-modal')\n    })\n  }))), __jsx(Contact, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"contactNumberText\",\n    defaultMessage: \"Select Your Contact Number\"\n  })), __jsx(ButtonGroup, null, __jsx(RadioGroup, {\n    items: contact,\n    component: item => __jsx(RadioCard, {\n      id: item.id,\n      key: item.id,\n      title: item.type,\n      content: item.number,\n      checked: item.type === 'primary',\n      onChange: () => dispatch({\n        type: 'SET_PRIMARY_CONTACT',\n        payload: item.id.toString()\n      }),\n      name: \"contact\",\n      onEdit: () => handleEditDelete(item, 'edit', 'contact'),\n      onDelete: () => handleEditDelete(item, 'delete', 'contact')\n    }),\n    secondaryComponent: __jsx(Button, {\n      title: \"Add Contact\",\n      iconPosition: \"right\",\n      colors: \"primary\",\n      size: \"small\",\n      variant: \"outlined\",\n      type: \"button\",\n      intlButtonId: \"addContactBtn\",\n      onClick: () => handleModal(UpdateContact, 'add-contact-modal')\n    })\n  }))), __jsx(PaymentOption, null, __jsx(Heading, null, __jsx(FormattedMessage, {\n    id: \"selectPaymentText\",\n    defaultMessage: \"Select Payment Option\"\n  })), __jsx(PaymentGroup, {\n    name: \"payment\",\n    deviceType: deviceType,\n    items: card,\n    onEditDeleteField: (item, type) => handleEditDelete(item, type, 'payment'),\n    onChange: item => dispatch({\n      type: 'SET_PRIMARY_CARD',\n      payload: item.id.toString()\n    }),\n    handleAddNewCard: () => {\n      handleModal(StripePaymentForm, {\n        totalPrice\n      }, 'add-address-modal stripe-modal');\n    }\n  })), __jsx(CheckoutSubmit, null, __jsx(Button, {\n    onClick: handleSubmit,\n    type: \"button\",\n    disabled: !isValid,\n    title: \"Proceed to Checkout\" // size='small'\n    ,\n    intlButtonId: \"proceesCheckout\",\n    loader: __jsx(Loader, null),\n    isLoading: loading\n  })))));\n};\n\nexport default Checkout;","map":null,"metadata":{},"sourceType":"module"}