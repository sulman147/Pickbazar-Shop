{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Web Work\\\\pickbazar\\\\packages\\\\shop\\\\components\\\\Input\\\\Input.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, Fragment } from 'react';\nimport InputWrapper, { VerifiedLabel, VerifictionButton } from './Input.style';\nimport { FormattedMessage } from 'react-intl';\n\nconst Input = (_ref) => {\n  let {\n    type,\n    value,\n    label,\n    name,\n    style,\n    disabled,\n    className,\n    onUpdate,\n    placeholder,\n    intlPlaceholderId,\n    intlInputLabelId,\n    onBlur,\n    onFocus,\n    verification,\n    // this prop only for number field\n    verified,\n    // this prop only for number field\n    handleVerification,\n    // this prop only for number field\n    secondaryComponent,\n    searchIcon,\n    iconPosition,\n    containerStyle\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"type\", \"value\", \"label\", \"name\", \"style\", \"disabled\", \"className\", \"onUpdate\", \"placeholder\", \"intlPlaceholderId\", \"intlInputLabelId\", \"onBlur\", \"onFocus\", \"verification\", \"verified\", \"handleVerification\", \"secondaryComponent\", \"searchIcon\", \"iconPosition\", \"containerStyle\"]);\n\n  // Input State\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    value: value\n  }); // Add all classs to an array\n\n  const addAllClasses = ['field-wrapper']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Add disabled class\n\n\n  if (disabled) {\n    addAllClasses.push('disabled');\n  } // Add with search icon class\n\n\n  if (searchIcon) {\n    addAllClasses.push('with-search-icon');\n  }\n\n  if (verification) {\n    verified ? addAllClasses.push('number-verified') : addAllClasses.push('send-verification');\n  } // Input onChange handler\n\n\n  const handleOnChange = e => {\n    let currentValue = e.target.value;\n    setState(_objectSpread({}, state, {\n      value: currentValue\n    }));\n    onUpdate(currentValue);\n  }; // Init variable for Label For and Input element\n\n\n  let htmlFor, inputElement; // Make Label value to htmlFor\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // set icon position\n\n\n  const position = iconPosition || 'left';\n\n  const SearchIcon = searchIcon && __jsx(\"span\", {\n    className: `${position === 'right' ? 'right' : 'left'} search-icon`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, searchIcon);\n\n  const withSearchIconClass = searchIcon && position === 'right' ? 'icon-right' : position === 'left' ? 'icon-left' : ''; // Label Field\n\n  const LabelField = label && __jsx(\"label\", {\n    htmlFor: htmlFor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, __jsx(FormattedMessage, {\n    id: intlInputLabelId ? intlInputLabelId : 'defaultIntlInputLabelId',\n    defaultMessage: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })); // Set Input element based on type prop\n\n\n  switch (type) {\n    case 'textarea':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, placeholder => __jsx(\"textarea\", _extends({\n        id: htmlFor,\n        name: name,\n        disabled: disabled,\n        value: value ? value : state.value,\n        onChange: handleOnChange,\n        placeholder: placeholder,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }))));\n      break;\n\n    case 'number':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, placeholder => __jsx(\"input\", _extends({\n        type: \"number\",\n        id: htmlFor,\n        name: name,\n        disabled: disabled,\n        value: value ? value : state.value,\n        onChange: handleOnChange,\n        placeholder: placeholder,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }))), verification && __jsx(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, verified ? __jsx(VerifiedLabel, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, __jsx(FormattedMessage, {\n        id: \"inputVerified\",\n        defaultMessage: \"Verified\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })) : __jsx(VerifictionButton, {\n        onClick: handleVerification,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, __jsx(FormattedMessage, {\n        id: \"inputSendVerification\",\n        defaultMessage: \"Send Verification\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }))));\n      break;\n\n    case 'password':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, placeholder => __jsx(\"input\", {\n        type: \"password\",\n        id: htmlFor,\n        name: name,\n        disabled: disabled,\n        value: value ? value : state.value,\n        onChange: handleOnChange // placeholder={placeholder}\n        ,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      })));\n      break;\n\n    case 'email':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, placeholder => __jsx(\"input\", _extends({\n        type: \"email\",\n        id: htmlFor,\n        name: name,\n        disabled: disabled,\n        value: value ? value : state.value,\n        onChange: handleOnChange,\n        placeholder: placeholder,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }))));\n      break;\n\n    default:\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, position === 'left' && SearchIcon, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }, placeholder => __jsx(\"input\", _extends({\n        type: \"text\",\n        id: htmlFor,\n        name: name,\n        value: value ? value : state.value,\n        onChange: handleOnChange,\n        placeholder: placeholder,\n        onBlur: onBlur,\n        onFocus: onFocus,\n        style: style,\n        className: withSearchIconClass\n      }, rest, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }))), position === 'right' && SearchIcon);\n      break;\n  }\n\n  return __jsx(InputWrapper, {\n    className: addAllClasses.join(' '),\n    style: containerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, LabelField || secondaryComponent ? __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, LabelField, \" \", secondaryComponent) : '', inputElement);\n};\n\nexport default Input;","map":{"version":3,"sources":["E:/React Web Work/pickbazar/packages/shop/components/Input/Input.tsx"],"names":["React","useState","Fragment","InputWrapper","VerifiedLabel","VerifictionButton","FormattedMessage","Input","type","value","label","name","style","disabled","className","onUpdate","placeholder","intlPlaceholderId","intlInputLabelId","onBlur","onFocus","verification","verified","handleVerification","secondaryComponent","searchIcon","iconPosition","containerStyle","rest","state","setState","addAllClasses","push","handleOnChange","e","currentValue","target","htmlFor","inputElement","replace","toLowerCase","position","SearchIcon","withSearchIconClass","LabelField","join"],"mappings":"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","sourcesContent":["import React, { useState, Fragment } from 'react';\nimport InputWrapper, { VerifiedLabel, VerifictionButton } from './Input.style';\nimport { FormattedMessage } from 'react-intl';\n\ntype InputProps = {\n  id?: any;\n  type?: 'text' | 'email' | 'password' | 'number' | 'textarea';\n  disabled?: boolean;\n  label?: string;\n  name?: string;\n  value?: any;\n  style?: React.CSSProperties;\n  containerStyle?: React.CSSProperties;\n  className?: string;\n  placeholder?: any;\n  intlPlaceholderId?: string;\n  intlInputLabelId?: string;\n  onUpdate: Function;\n  onBlur?: (e: any) => void;\n  onFocus?: (e: any) => void;\n  verification?: boolean; // this prop only for number field\n  verified?: boolean; // this prop only for number field\n  handleVerification?: (e: any) => void; // this prop only for number field\n  secondaryComponent?: React.ReactChild | React.ReactChildren; // this prop only for number field\n  searchIcon?: React.ReactNode;\n  iconPosition?: 'left' | 'right';\n};\n\nconst Input: React.FC<any> = ({\n  type,\n  value,\n  label,\n  name,\n  style,\n  disabled,\n  className,\n  onUpdate,\n  placeholder,\n  intlPlaceholderId,\n  intlInputLabelId,\n  onBlur,\n  onFocus,\n  verification, // this prop only for number field\n  verified, // this prop only for number field\n  handleVerification, // this prop only for number field\n  secondaryComponent,\n  searchIcon,\n  iconPosition,\n  containerStyle,\n  ...rest\n}) => {\n  // Input State\n  const [state, setState] = useState({\n    value: value,\n  });\n\n  // Add all classs to an array\n  const addAllClasses: string[] = ['field-wrapper'];\n\n  // className prop checking\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  // Add disabled class\n  if (disabled) {\n    addAllClasses.push('disabled');\n  }\n\n  // Add with search icon class\n  if (searchIcon) {\n    addAllClasses.push('with-search-icon');\n  }\n\n  if (verification) {\n    verified\n      ? addAllClasses.push('number-verified')\n      : addAllClasses.push('send-verification');\n  }\n\n  // Input onChange handler\n  const handleOnChange = (e: any) => {\n    let currentValue: any = e.target.value;\n    setState({\n      ...state,\n      value: currentValue,\n    });\n    onUpdate(currentValue);\n  };\n\n  // Init variable for Label For and Input element\n  let htmlFor, inputElement;\n\n  // Make Label value to htmlFor\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  }\n\n  // set icon position\n  const position: string = iconPosition || 'left';\n\n  const SearchIcon = searchIcon && (\n    <span className={`${position === 'right' ? 'right' : 'left'} search-icon`}>\n      {searchIcon}\n    </span>\n  );\n\n  const withSearchIconClass: string =\n    searchIcon && position === 'right'\n      ? 'icon-right'\n      : position === 'left'\n      ? 'icon-left'\n      : '';\n\n  // Label Field\n  const LabelField = label && (\n    <label htmlFor={htmlFor}>\n      <FormattedMessage\n        id={intlInputLabelId ? intlInputLabelId : 'defaultIntlInputLabelId'}\n        defaultMessage={label}\n      />\n    </label>\n  );\n\n  // Set Input element based on type prop\n  switch (type) {\n    case 'textarea':\n      inputElement = (\n        <div className=\"inner-wrap\">\n          <FormattedMessage\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\n            defaultMessage=\"&nbsp;\"\n          >\n            {placeholder => (\n              <textarea\n                id={htmlFor}\n                name={name}\n                disabled={disabled}\n                value={value ? value : state.value}\n                onChange={handleOnChange}\n                placeholder={placeholder}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                style={style}\n                {...rest}\n              />\n            )}\n          </FormattedMessage>\n        </div>\n      );\n      break;\n\n    case 'number':\n      inputElement = (\n        <div className=\"inner-wrap\">\n          <FormattedMessage\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\n            defaultMessage=\"&nbsp;\"\n          >\n            {placeholder => (\n              <input\n                type=\"number\"\n                id={htmlFor}\n                name={name}\n                disabled={disabled}\n                value={value ? value : state.value}\n                onChange={handleOnChange}\n                placeholder={placeholder}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                style={style}\n                {...rest}\n              />\n            )}\n          </FormattedMessage>\n          {verification && (\n            <Fragment>\n              {verified ? (\n                <VerifiedLabel>\n                  <FormattedMessage\n                    id=\"inputVerified\"\n                    defaultMessage=\"Verified\"\n                  />\n                </VerifiedLabel>\n              ) : (\n                <VerifictionButton onClick={handleVerification}>\n                  <FormattedMessage\n                    id=\"inputSendVerification\"\n                    defaultMessage=\"Send Verification\"\n                  />\n                </VerifictionButton>\n              )}\n            </Fragment>\n          )}\n        </div>\n      );\n      break;\n\n    case 'password':\n      inputElement = (\n        <div className=\"inner-wrap\">\n          <FormattedMessage\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\n            defaultMessage=\"&nbsp;\"\n          >\n            {placeholder => (\n              <input\n                type=\"password\"\n                id={htmlFor}\n                name={name}\n                disabled={disabled}\n                value={value ? value : state.value}\n                onChange={handleOnChange}\n                // placeholder={placeholder}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                style={style}\n              />\n            )}\n          </FormattedMessage>\n        </div>\n      );\n      break;\n\n    case 'email':\n      inputElement = (\n        <div className=\"inner-wrap\">\n          <FormattedMessage\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\n            defaultMessage=\"&nbsp;\"\n          >\n            {placeholder => (\n              <input\n                type=\"email\"\n                id={htmlFor}\n                name={name}\n                disabled={disabled}\n                value={value ? value : state.value}\n                onChange={handleOnChange}\n                placeholder={placeholder}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                style={style}\n                {...rest}\n              />\n            )}\n          </FormattedMessage>\n        </div>\n      );\n      break;\n\n    default:\n      inputElement = (\n        <div className=\"inner-wrap\">\n          {position === 'left' && SearchIcon}\n          <FormattedMessage\n            id={intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId'}\n            defaultMessage=\"&nbsp;\"\n          >\n            {placeholder => (\n              <input\n                type=\"text\"\n                id={htmlFor}\n                name={name}\n                value={value ? value : state.value}\n                onChange={handleOnChange}\n                placeholder={placeholder}\n                onBlur={onBlur}\n                onFocus={onFocus}\n                style={style}\n                className={withSearchIconClass}\n                {...rest}\n              />\n            )}\n          </FormattedMessage>\n          {position === 'right' && SearchIcon}\n        </div>\n      );\n      break;\n  }\n\n  return (\n    <InputWrapper className={addAllClasses.join(' ')} style={containerStyle}>\n      {LabelField || secondaryComponent ? (\n        <div>\n          {LabelField} {secondaryComponent}\n        </div>\n      ) : (\n        ''\n      )}\n      {inputElement}\n    </InputWrapper>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}