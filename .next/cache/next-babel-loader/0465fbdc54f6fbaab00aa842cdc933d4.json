{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation applyCoupon($code: String!) {\\n    applyCoupon(code: $code) {\\n      id\\n      code\\n      discountInPercent\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext, useState } from 'react';\nimport Link from 'next/link';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CartContext } from 'contexts/cart/cart.context';\nimport { CartPopupBody, PopupHeader, PopupItemCount, CloseButton, ItemCards, ItemImgWrapper, ItemDetails, ItemTitle, ItemPrice, ItemWeight, TotalPrice, PromoCode, DeleteButton, CheckoutButtonWrapper, CheckoutButton, Title, PriceBox, NoProductMsg, ItemWrapper, CouponBoxWrapper, CouponCode, ErrorMsg } from './CartItemCard.style';\nimport { CloseIcon } from 'components/AllSvgIcon';\nimport { ShoppingBagLarge } from 'components/AllSvgIcon';\nimport InputNumber from 'components/InputIncDec/InputIncDec';\nimport { calculateItemPrice } from 'helper/utility';\nimport { CURRENCY } from 'helper/constant';\nimport { FormattedMessage } from 'react-intl';\nimport CouponBox from 'components/CouponBox/CouponBox';\nimport { Scrollbars } from 'react-custom-scrollbars';\nvar APPLY_COUPON = gql(_templateObject());\n\nvar CartItem = function CartItem(_ref) {\n  var product = _ref.product,\n      update = _ref.update;\n  var itemPrice = calculateItemPrice(product);\n  return __jsx(ItemCards, {\n    key: product.id\n  }, __jsx(InputNumber, {\n    type: \"vertical\",\n    value: product.quantity,\n    onUpdate: function onUpdate(value) {\n      return update(product.id, value);\n    },\n    style: {\n      marginRight: 15\n    }\n  }), __jsx(ItemImgWrapper, null, __jsx(\"img\", {\n    className: \"ListImage\",\n    src: product.image,\n    height: \"150\",\n    width: \"150\"\n  })), __jsx(ItemDetails, null, __jsx(ItemTitle, null, product.title), __jsx(ItemPrice, null, CURRENCY, product.salePrice ? product.salePrice : product.price), __jsx(ItemWeight, null, product.quantity ? product.quantity : 1, \" x\", ' ', product.unit ? product.unit : '')), __jsx(TotalPrice, null, CURRENCY, itemPrice), __jsx(DeleteButton, {\n    onClick: function onClick() {\n      return update(product.id, 0);\n    }\n  }, __jsx(CloseIcon, null)));\n}; // For showing demo only -Ends here ... delete this codes when you work on functin code and comment out bellow codes\n\n\nvar Cart = function Cart(_ref2) {\n  var onCloseBtnClick = _ref2.onCloseBtnClick,\n      scrollbarHeight = _ref2.scrollbarHeight;\n\n  var _useContext = useContext(CartContext),\n      products = _useContext.products,\n      totalPrice = _useContext.totalPrice,\n      update = _useContext.update,\n      addCoupon = _useContext.addCoupon,\n      coupon = _useContext.coupon;\n\n  var _useState = useState(''),\n      couponText = _useState[0],\n      setCoupon = _useState[1];\n\n  var _useState2 = useState(false),\n      displayCoupon = _useState2[0],\n      showCoupon = _useState2[1];\n\n  var _useState3 = useState(''),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  var _useMutation = useMutation(APPLY_COUPON),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      applyedCoupon = _useMutation2[0];\n\n  var handleApplyCoupon = function handleApplyCoupon() {\n    var _ref3, applyCoupon;\n\n    return _regeneratorRuntime.async(function handleApplyCoupon$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(applyedCoupon({\n              variables: {\n                code: couponText\n              }\n            }));\n\n          case 2:\n            _ref3 = _context.sent;\n            applyCoupon = _ref3.data.applyCoupon;\n\n            if (applyCoupon && applyCoupon.discountInPercent) {\n              setError('');\n              addCoupon(applyCoupon);\n              setCoupon('');\n            } else {\n              setError('Invalid Coupon');\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var handleChange = function handleChange(value) {\n    setCoupon(value);\n  };\n\n  var toggleCoupon = function toggleCoupon() {\n    showCoupon(true);\n  };\n\n  return __jsx(CartPopupBody, null, __jsx(PopupHeader, null, __jsx(PopupItemCount, null, __jsx(ShoppingBagLarge, {\n    width: \"19px\",\n    height: \"24px\"\n  }), __jsx(\"span\", null, products && products.length, ' ', products.length > 1 ? __jsx(FormattedMessage, {\n    id: \"cartItems\",\n    defaultMessage: \"items\"\n  }) : __jsx(FormattedMessage, {\n    id: \"cartItem\",\n    defaultMessage: \"item\"\n  }))), __jsx(CloseButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(CloseIcon, null))), __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: scrollbarHeight\n  }, __jsx(ItemWrapper, null, products && products.length ? products.map(function (item) {\n    return __jsx(CartItem, {\n      key: \"cartItem-\".concat(item.id),\n      update: update,\n      product: item\n    });\n  }) : __jsx(NoProductMsg, null, __jsx(FormattedMessage, {\n    id: \"noProductFound\",\n    defaultMessage: \"No products found\"\n  })))), __jsx(CheckoutButtonWrapper, null, __jsx(PromoCode, null, !coupon.discountInPercent ? __jsx(React.Fragment, null, !displayCoupon ? __jsx(\"button\", {\n    onClick: toggleCoupon\n  }, __jsx(FormattedMessage, {\n    id: \"specialCode\",\n    defaultMessage: \"Have a special code?\"\n  })) : __jsx(CouponBoxWrapper, null, __jsx(CouponBox, {\n    onUpdate: handleChange,\n    value: couponText,\n    onClick: handleApplyCoupon,\n    disabled: !couponText.length || !products.length,\n    buttonTitle: \"Apply\",\n    intlCouponBoxPlaceholder: \"couponPlaceholder\",\n    style: {\n      boxShadow: '0 3px 6px rgba(0, 0, 0, 0.06)'\n    }\n  }), error ? __jsx(ErrorMsg, null, error) : '')) : __jsx(CouponCode, null, __jsx(FormattedMessage, {\n    id: \"couponApplied\",\n    defaultMessage: \"Coupon Applied\"\n  }), __jsx(\"span\", null, coupon.code))), products.length !== 0 ? __jsx(Link, {\n    href: \"/checkout\"\n  }, __jsx(CheckoutButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, _parseFloat(\"\".concat(totalPrice)).toFixed(2))))) : __jsx(CheckoutButton, null, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, _parseFloat(\"\".concat(totalPrice)).toFixed(2))))));\n};\n\nexport default Cart;","map":null,"metadata":{},"sourceType":"module"}