{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport Image from 'react-image';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { FormattedMessage } from 'react-intl';\nimport { GiftCardWrapper, GiftCardImageWrapper, CardInfo, CardContent, CopyButton, GiftCode, CopySuccess } from './GiftCard.style';\n\nconst GiftCard = (_ref) => {\n  let {\n    image,\n    weight,\n    onClick,\n    onChange,\n    code\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"image\", \"weight\", \"onClick\", \"onChange\", \"code\"]);\n\n  const {\n    0: copyText,\n    1: setCopyText\n  } = useState({\n    value: code,\n    copied: false\n  });\n  const codeRef = useRef(null);\n  useEffect(() => {\n    if (copyText.copied) {\n      setTimeout(() => {\n        setCopyText(_objectSpread({}, copyText, {\n          copied: false\n        }));\n      }, 3500);\n    }\n  }, [copyText.copied]);\n  return __jsx(GiftCardWrapper, _extends({}, props, {\n    className: \"product-card\"\n  }), __jsx(GiftCardImageWrapper, null, __jsx(Image, {\n    src: image,\n    className: \"gift-image\",\n    alt: \"gift image\"\n  })), __jsx(CardInfo, null, __jsx(CardContent, null, __jsx(GiftCode, {\n    ref: codeRef,\n    value: copyText.value,\n    readOnly: true\n  }), !copyText.copied ? __jsx(CopyToClipboard, {\n    text: copyText.value,\n    onCopy: () => setCopyText(_objectSpread({}, copyText, {\n      copied: true\n    }))\n  }, __jsx(CopyButton, null, __jsx(FormattedMessage, {\n    id: \"intlCopyBtnId\",\n    defaultMessage: \"Copy\"\n  }))) : __jsx(CopySuccess, null, __jsx(FormattedMessage, {\n    id: \"intlCopySuccessId\",\n    defaultMessage: \"Copied!\"\n  })))));\n};\n\nexport default GiftCard;","map":null,"metadata":{},"sourceType":"module"}