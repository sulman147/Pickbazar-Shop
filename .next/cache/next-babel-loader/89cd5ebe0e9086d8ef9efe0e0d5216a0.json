{"ast":null,"code":"import { useState, useRef, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\nexport function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => void (ref.current = value), [value]);\n  return ref.current;\n}\nexport function useMeasure() {\n  const ref = useRef();\n  const {\n    0: bounds,\n    1: set\n  } = useState({\n    left: 0,\n    top: 0,\n    width: 0,\n    height: 0\n  });\n  const {\n    0: ro\n  } = useState(() => new ResizeObserver(([entry]) => set(entry.contentRect)));\n  useEffect(() => {\n    if (ref.current) ro.observe(ref.current);\n    return () => ro.disconnect();\n  }, []);\n  return [{\n    ref\n  }, bounds];\n}","map":{"version":3,"sources":["E:/React Web Work/pickbazar/packages/shop/helper/hooks.tsx"],"names":["useState","useRef","useEffect","ResizeObserver","usePrevious","value","ref","current","useMeasure","bounds","set","left","top","width","height","ro","entry","contentRect","observe","disconnect"],"mappings":"AAAA,SAAgBA,QAAhB,EAA0BC,MAA1B,EAAkCC,SAAlC,QAAmD,OAAnD;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA,OAAO,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AACjC,QAAMC,GAAG,GAAGL,MAAM,EAAlB;AACAC,EAAAA,SAAS,CAAC,MAAM,MAAMI,GAAG,CAACC,OAAJ,GAAcF,KAApB,CAAP,EAAmC,CAACA,KAAD,CAAnC,CAAT;AACA,SAAOC,GAAG,CAACC,OAAX;AACD;AAED,OAAO,SAASC,UAAT,GAAsB;AAC3B,QAAMF,GAAG,GAAGL,MAAM,EAAlB;AACA,QAAM;AAAA,OAACQ,MAAD;AAAA,OAASC;AAAT,MAAgBV,QAAQ,CAAM;AAAEW,IAAAA,IAAI,EAAE,CAAR;AAAWC,IAAAA,GAAG,EAAE,CAAhB;AAAmBC,IAAAA,KAAK,EAAE,CAA1B;AAA6BC,IAAAA,MAAM,EAAE;AAArC,GAAN,CAA9B;AACA,QAAM;AAAA,OAACC;AAAD,MAAOf,QAAQ,CACnB,MAAM,IAAIG,cAAJ,CAAmB,CAAC,CAACa,KAAD,CAAD,KAAaN,GAAG,CAACM,KAAK,CAACC,WAAP,CAAnC,CADa,CAArB;AAGAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,GAAG,CAACC,OAAR,EAAiBQ,EAAE,CAACG,OAAH,CAAWZ,GAAG,CAACC,OAAf;AACjB,WAAO,MAAMQ,EAAE,CAACI,UAAH,EAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAIA,SAAO,CAAC;AAAEb,IAAAA;AAAF,GAAD,EAAUG,MAAV,CAAP;AACD","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\nexport function usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => void (ref.current = value), [value]);\n  return ref.current;\n}\n\nexport function useMeasure() {\n  const ref = useRef();\n  const [bounds, set] = useState<any>({ left: 0, top: 0, width: 0, height: 0 });\n  const [ro] = useState(\n    () => new ResizeObserver(([entry]) => set(entry.contentRect))\n  );\n  useEffect(() => {\n    if (ref.current) ro.observe(ref.current);\n    return () => ro.disconnect();\n  }, []);\n  return [{ ref }, bounds];\n}\n"]},"metadata":{},"sourceType":"module"}