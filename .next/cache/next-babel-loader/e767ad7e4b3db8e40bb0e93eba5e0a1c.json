{"ast":null,"code":"import { useState, useCallback, useEffect } from 'react';\nimport debounce from './debounce'; // maybe use a hook instead?\n\nfunction useDimensions() {\n  var liveMeasure = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 250;\n  var initialDimensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _useState = useState(initialDimensions),\n      dimensions = _useState[0],\n      setDimensions = _useState[1];\n\n  var _useState2 = useState(null),\n      node = _useState2[0],\n      setNode = _useState2[1];\n\n  var ref = useCallback(function (newNode) {\n    setNode(newNode);\n  }, []);\n  useEffect(function () {\n    // need ref to continue\n    if (!node) {\n      return;\n    }\n\n    var measure = function measure() {\n      window.requestAnimationFrame(function () {\n        var newDimensions = node.getBoundingClientRect();\n        setDimensions(newDimensions);\n      });\n    }; // invoke measure right away\n\n\n    measure();\n\n    if (liveMeasure) {\n      var debounceMeasure = debounce(measure, delay);\n\n      if ('ResizeObserver' in window) {\n        var resizeObserver = new ResizeObserver(debounceMeasure);\n        resizeObserver.observe(node);\n        window.addEventListener('scroll', debounceMeasure);\n        return function () {\n          resizeObserver.disconnect();\n          window.removeEventListener('scroll', debounceMeasure);\n        };\n      }\n\n      window.addEventListener('resize', debounceMeasure);\n      window.addEventListener('scroll', debounceMeasure);\n      return function () {\n        window.removeEventListener('resize', debounceMeasure);\n        window.removeEventListener('scroll', debounceMeasure);\n      };\n    }\n  }, [node, liveMeasure, delay]);\n  return [ref, dimensions, node];\n}\n\nexport default useDimensions; // Usage\n// function App() {\n//   const [wrapperRef, dimensions] = useDimensions();\n//   return (\n//     <div ref={wrapperRef}>\n//       height: {dimensions.height}\n//       width: {dimensions.width}\n//     </div>\n//   );\n// }","map":null,"metadata":{},"sourceType":"module"}