{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  .cartPopup{\\n    top: auto !important;\\n    left: auto !important;\\n    bottom: 50px !important;\\n    right: 50px !important;\\n    box-shadow: 0 21px 36px rgba(0, 0, 0, 0.16);\\n    transform-origin: bottom right;\\n\\n    @media (max-width: 767px) {\\n      max-width: none!important;\\n      width: 100% !important;\\n      bottom: 0 !important;\\n      left: 0!important;\\n      background: #fff;\\n      overflow: initial !important;\\n      transform-origin: bottom center;\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useContext } from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport CartItem from './Cart';\nimport CartPopupButton, { BoxedCartButton } from 'components/CartPopup/CartPopupButton';\nimport { CartContext } from 'contexts/cart/cart.context';\nimport { CURRENCY } from 'helper/constant';\nimport { CartSlidePopup } from './CartItemCard.style';\nimport { FormattedMessage } from 'react-intl';\nvar CartPopupStyle = createGlobalStyle(_templateObject());\n\nvar CartPopUp = function CartPopUp(_ref) {\n  var _ref$deviceType = _ref.deviceType,\n      mobile = _ref$deviceType.mobile,\n      tablet = _ref$deviceType.tablet,\n      desktop = _ref$deviceType.desktop;\n\n  var _useContext = useContext(CartContext),\n      cartState = _useContext.cartState,\n      dispatch = _useContext.dispatch,\n      products = _useContext.products,\n      totalPrice = _useContext.totalPrice;\n\n  var handleModal = function handleModal() {\n    openModal({\n      show: true,\n      config: {\n        className: 'cartPopup',\n        width: 'auto',\n        height: 'auto',\n        enableResizing: false,\n        disableDragging: true,\n        transition: {\n          tension: 360,\n          friction: 40\n        }\n      },\n      closeOnClickOutside: true,\n      component: CartItem,\n      closeComponent: function closeComponent() {\n        return __jsx(\"div\", null);\n      },\n      componentProps: {\n        onCloseBtnClick: closeModal,\n        scrollbarHeight: 370\n      }\n    });\n  };\n\n  var toggleCart = function toggleCart() {\n    dispatch({\n      type: 'TOGGLE'\n    });\n  };\n\n  var cartSlideclass = cartState.isOpen === true ? 'cartPopupFixed' : '';\n  return __jsx(React.Fragment, null, mobile || tablet ? __jsx(React.Fragment, null, __jsx(CartPopupStyle, null), __jsx(CartPopupButton, {\n    className: \"product-cart\",\n    itemCount: products.length,\n    itemPostfix: products.length > 1 ? __jsx(FormattedMessage, {\n      id: \"cartItems\",\n      defaultMessage: \"items\"\n    }) : __jsx(FormattedMessage, {\n      id: \"cartItem\",\n      defaultMessage: \"item\"\n    }),\n    price: totalPrice,\n    pricePrefix: \"$\",\n    onClick: handleModal\n  })) : __jsx(React.Fragment, null, __jsx(CartSlidePopup, {\n    className: cartSlideclass\n  }, cartState.isOpen === true && __jsx(CartItem, {\n    onCloseBtnClick: toggleCart,\n    scrollbarHeight: \"100vh\"\n  })), __jsx(BoxedCartButton, {\n    className: \"product-cart\",\n    itemCount: products.length,\n    itemPostfix: products.length > 1 ? __jsx(FormattedMessage, {\n      id: \"cartItems\",\n      defaultMessage: \"items\"\n    }) : __jsx(FormattedMessage, {\n      id: \"cartItem\",\n      defaultMessage: \"item\"\n    }),\n    price: totalPrice,\n    pricePrefix: CURRENCY,\n    onClick: toggleCart\n  })));\n};\n\nexport default CartPopUp;","map":null,"metadata":{},"sourceType":"module"}