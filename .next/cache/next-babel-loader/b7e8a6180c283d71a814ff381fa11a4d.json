{"ast":null,"code":"var _jsxFileName = \"E:\\\\React Web Work\\\\pickbazar\\\\packages\\\\shop\\\\components\\\\CategoryDropdown\\\\SpringDropdown.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { memo } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useMeasure, usePrevious } from 'helper/hooks';\nimport { DropdownWrapper, Dropdown, Title, Content, IconWrapper } from './CategoryDropdown.style';\nimport CategoryIcon from './CategoryIcon';\n\nconst DropdownSubItem = ({\n  title,\n  activeClass,\n  onClick\n}) => {\n  return __jsx(Title, {\n    className: activeClass,\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, title);\n};\n\nconst DropdownItem = memo(({\n  activeClass,\n  title,\n  onClick,\n  isOpen,\n  children,\n  categoryIcon,\n  iconArrays\n}) => {\n  const previous = usePrevious(isOpen);\n  const [bind, {\n    height: viewHeight\n  }] = useMeasure();\n  const {\n    height,\n    opacity,\n    transform\n  } = useSpring({\n    from: {\n      height: 0,\n      opacity: 0,\n      transform: 'translate3d(25px,0,0)'\n    },\n    to: {\n      height: isOpen ? viewHeight : 0,\n      opacity: isOpen ? 1 : 0,\n      transform: `translate3d(${isOpen ? 0 : 25}px,0,0)`\n    }\n  });\n  return __jsx(Dropdown, {\n    className: isOpen ? 'open' : '',\n    isOpen: isOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, __jsx(Title, {\n    className: activeClass,\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, categoryIcon ? __jsx(IconWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, __jsx(CategoryIcon, {\n    name: categoryIcon,\n    iconArray: iconArrays,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })) : null, __jsx(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, title)), __jsx(Content, {\n    style: {\n      opacity,\n      height: isOpen && previous === !isOpen ? 'auto' : height\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, __jsx(animated.div, _extends({\n    style: {\n      transform\n    }\n  }, bind, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), children)));\n});\n\nconst CategoryDropdown = ({\n  className,\n  items = [],\n  handleCategorySelection,\n  selectedQueries,\n  iconList\n}) => {\n  const addAllClasses = ['category-dropdown'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(DropdownWrapper, {\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, items.length !== 0 && items.map(dropdown => {\n    return __jsx(DropdownItem, {\n      key: dropdown.slug,\n      title: dropdown.title,\n      iconArrays: iconList,\n      categoryIcon: dropdown.icon,\n      activeClass: selectedQueries && selectedQueries.includes(dropdown.slug) ? 'active' : '',\n      isOpen: selectedQueries && (selectedQueries.includes(dropdown.slug) || dropdown.children.find(children => selectedQueries.includes(children.slug))),\n      onClick: () => {\n        handleCategorySelection(dropdown.slug);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, dropdown.children.map(item => {\n      return __jsx(DropdownSubItem, {\n        key: item.slug,\n        title: item.title,\n        onClick: () => {\n          handleCategorySelection(item.slug);\n        },\n        activeClass: selectedQueries && selectedQueries.includes(item.slug) ? 'active' : '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      });\n    }));\n  }));\n};\n\nexport default CategoryDropdown;","map":{"version":3,"sources":["E:/React Web Work/pickbazar/packages/shop/components/CategoryDropdown/SpringDropdown.tsx"],"names":["React","memo","useSpring","animated","useMeasure","usePrevious","DropdownWrapper","Dropdown","Title","Content","IconWrapper","CategoryIcon","DropdownSubItem","title","activeClass","onClick","DropdownItem","isOpen","children","categoryIcon","iconArrays","previous","bind","height","viewHeight","opacity","transform","from","to","CategoryDropdown","className","items","handleCategorySelection","selectedQueries","iconList","addAllClasses","push","length","map","dropdown","slug","icon","includes","find","item"],"mappings":"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","sourcesContent":["import React, { memo } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useMeasure, usePrevious } from 'helper/hooks';\nimport {\n  DropdownWrapper,\n  Dropdown,\n  Title,\n  Content,\n  IconWrapper,\n} from './CategoryDropdown.style';\nimport CategoryIcon from './CategoryIcon';\n\ntype DropdownProps = {\n  className?: string;\n  items: any[];\n  id?: number;\n  handleCategorySelection?: any;\n  selectedQueries?: any;\n  iconList?: any;\n};\n\ntype DropdownItemProps = {\n  defaultOpen?: boolean;\n  activeClass?: String;\n  title?: String;\n  key?: any;\n  categoryIcon?: any;\n  children?: any;\n  iconArrays?: any;\n  onClick?: any;\n  isOpen: any;\n};\n\ntype DropdownSubItemProps = {\n  title?: string;\n  activeClass?: string;\n  key?: any;\n  onClick?: any;\n};\n\nconst DropdownSubItem: React.FC<DropdownSubItemProps> = ({\n  title,\n  activeClass,\n  onClick,\n}) => {\n  return (\n    <Title className={activeClass} onClick={onClick}>\n      {title}\n    </Title>\n  );\n};\n\nconst DropdownItem: React.FC<DropdownItemProps> = memo(\n  ({\n    activeClass,\n    title,\n    onClick,\n    isOpen,\n    children,\n    categoryIcon,\n    iconArrays,\n  }) => {\n    const previous = usePrevious(isOpen);\n    const [bind, { height: viewHeight }] = useMeasure();\n    const { height, opacity, transform } = useSpring<any>({\n      from: { height: 0, opacity: 0, transform: 'translate3d(25px,0,0)' },\n      to: {\n        height: isOpen ? viewHeight : 0,\n        opacity: isOpen ? 1 : 0,\n        transform: `translate3d(${isOpen ? 0 : 25}px,0,0)`,\n      },\n    });\n\n    return (\n      <Dropdown className={isOpen ? 'open' : ''} isOpen={isOpen}>\n        <Title className={activeClass} onClick={onClick}>\n          {categoryIcon ? (\n            <IconWrapper>\n              <CategoryIcon name={categoryIcon} iconArray={iconArrays} />\n            </IconWrapper>\n          ) : null}\n          <span>{title}</span>\n        </Title>\n\n        <Content\n          style={{\n            opacity,\n            height: isOpen && previous === !isOpen ? 'auto' : height,\n          }}\n        >\n          <animated.div style={{ transform }} {...bind}>\n            {children}\n          </animated.div>\n        </Content>\n      </Dropdown>\n    );\n  }\n);\n\nconst CategoryDropdown: React.FC<DropdownProps> = ({\n  className,\n  items = [],\n  handleCategorySelection,\n  selectedQueries,\n  iconList,\n}) => {\n  const addAllClasses: string[] = ['category-dropdown'];\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return (\n    <DropdownWrapper className={className}>\n      {items.length !== 0 &&\n        items.map(dropdown => {\n          return (\n            <DropdownItem\n              key={dropdown.slug}\n              title={dropdown.title}\n              iconArrays={iconList}\n              categoryIcon={dropdown.icon}\n              activeClass={\n                selectedQueries && selectedQueries.includes(dropdown.slug)\n                  ? 'active'\n                  : ''\n              }\n              isOpen={\n                selectedQueries &&\n                (selectedQueries.includes(dropdown.slug) ||\n                  dropdown.children.find(children =>\n                    selectedQueries.includes(children.slug)\n                  ))\n              }\n              onClick={() => {\n                handleCategorySelection(dropdown.slug);\n              }}\n            >\n              {dropdown.children.map((item: any) => {\n                return (\n                  <DropdownSubItem\n                    key={item.slug}\n                    title={item.title}\n                    onClick={() => {\n                      handleCategorySelection(item.slug);\n                    }}\n                    activeClass={\n                      selectedQueries && selectedQueries.includes(item.slug)\n                        ? 'active'\n                        : ''\n                    }\n                  />\n                );\n              })}\n            </DropdownItem>\n          );\n        })}\n    </DropdownWrapper>\n  );\n};\n\nexport default CategoryDropdown;\n"]},"metadata":{},"sourceType":"module"}