{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { CardElement, injectStripe, Elements, StripeProvider } from 'react-stripe-elements';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './StripePaymentForm.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nconst StripeForm = injectStripe(({\n  getToken,\n  buttonText,\n  stripe\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext);\n\n  const handleSubmit = async () => {\n    let {\n      token\n    } = await stripe.createToken({\n      name: 'Name'\n    });\n    getToken(token);\n\n    if (token) {\n      dispatch({\n        type: 'ADD_CARD',\n        payload: token.card\n      });\n      closeModal();\n    }\n\n    console.log(token, 'token');\n  };\n\n  return __jsx(StripeFormWrapper, null, __jsx(Heading, null, \"Enter card info\"), __jsx(FieldWrapper, null, __jsx(CardElement, null)), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit\n  }, buttonText ? buttonText : 'Pay Now'));\n});\n\nconst StripePaymentForm = ({\n  item: {\n    price,\n    buttonText\n  }\n}) => {\n  const [getPayment] = useMutation(GET_PAYMENT);\n\n  const sendTokenToServer = async token => {\n    const payment_info = await getPayment({\n      variables: {\n        paymentInput: JSON.stringify({\n          token,\n          amount: price\n        })\n      }\n    });\n    console.log(payment_info, 'payment_info');\n  };\n\n  return false && __jsx(StripeProvider, {\n    apiKey: process.env.STRIPE_PUBLIC_KEY\n  }, __jsx(\"div\", {\n    className: \"example\"\n  }, __jsx(Elements, null, __jsx(StripeForm, {\n    getToken: token => sendTokenToServer(token),\n    buttonText: buttonText\n  }))));\n};\n\nexport default StripePaymentForm;","map":null,"metadata":{},"sourceType":"module"}