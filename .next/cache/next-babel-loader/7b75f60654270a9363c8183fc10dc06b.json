{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, Fragment } from 'react';\nimport InputWrapper, { VerifiedLabel, VerifictionButton } from './Input.style';\nimport { FormattedMessage } from 'react-intl';\n\nvar Input = function Input(_ref) {\n  var type = _ref.type,\n      value = _ref.value,\n      label = _ref.label,\n      name = _ref.name,\n      style = _ref.style,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      onUpdate = _ref.onUpdate,\n      placeholder = _ref.placeholder,\n      intlPlaceholderId = _ref.intlPlaceholderId,\n      intlInputLabelId = _ref.intlInputLabelId,\n      onBlur = _ref.onBlur,\n      onFocus = _ref.onFocus,\n      verification = _ref.verification,\n      verified = _ref.verified,\n      handleVerification = _ref.handleVerification,\n      secondaryComponent = _ref.secondaryComponent,\n      searchIcon = _ref.searchIcon,\n      iconPosition = _ref.iconPosition,\n      containerStyle = _ref.containerStyle,\n      rest = _objectWithoutProperties(_ref, [\"type\", \"value\", \"label\", \"name\", \"style\", \"disabled\", \"className\", \"onUpdate\", \"placeholder\", \"intlPlaceholderId\", \"intlInputLabelId\", \"onBlur\", \"onFocus\", \"verification\", \"verified\", \"handleVerification\", \"secondaryComponent\", \"searchIcon\", \"iconPosition\", \"containerStyle\"]);\n\n  // Input State\n  var _useState = useState({\n    value: value\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // Add all classs to an array\n\n\n  var addAllClasses = ['field-wrapper']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Add disabled class\n\n\n  if (disabled) {\n    addAllClasses.push('disabled');\n  } // Add with search icon class\n\n\n  if (searchIcon) {\n    addAllClasses.push('with-search-icon');\n  }\n\n  if (verification) {\n    verified ? addAllClasses.push('number-verified') : addAllClasses.push('send-verification');\n  } // Input onChange handler\n\n\n  var handleOnChange = function handleOnChange(e) {\n    var currentValue = e.target.value;\n    setState(_objectSpread({}, state, {\n      value: currentValue\n    }));\n    onUpdate(currentValue);\n  }; // Init variable for Label For and Input element\n\n\n  var htmlFor, inputElement; // Make Label value to htmlFor\n\n  if (label) {\n    htmlFor = label.replace(/\\s+/g, '_').toLowerCase();\n  } // set icon position\n\n\n  var position = iconPosition || 'left';\n\n  var SearchIcon = searchIcon && __jsx(\"span\", {\n    className: \"\".concat(position === 'right' ? 'right' : 'left', \" search-icon\")\n  }, searchIcon);\n\n  var withSearchIconClass = searchIcon && position === 'right' ? 'icon-right' : position === 'left' ? 'icon-left' : ''; // Label Field\n\n  var LabelField = label && __jsx(\"label\", {\n    htmlFor: htmlFor\n  }, __jsx(FormattedMessage, {\n    id: intlInputLabelId ? intlInputLabelId : 'defaultIntlInputLabelId',\n    defaultMessage: label\n  })); // Set Input element based on type prop\n\n\n  switch (type) {\n    case 'textarea':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, function (placeholder) {\n        return __jsx(\"textarea\", _extends({\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          value: value ? value : state.value,\n          onChange: handleOnChange,\n          placeholder: placeholder,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style\n        }, rest));\n      }));\n      break;\n\n    case 'number':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, function (placeholder) {\n        return __jsx(\"input\", _extends({\n          type: \"number\",\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          value: value ? value : state.value,\n          onChange: handleOnChange,\n          placeholder: placeholder,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style\n        }, rest));\n      }), verification && __jsx(Fragment, null, verified ? __jsx(VerifiedLabel, null, __jsx(FormattedMessage, {\n        id: \"inputVerified\",\n        defaultMessage: \"Verified\"\n      })) : __jsx(VerifictionButton, {\n        onClick: handleVerification\n      }, __jsx(FormattedMessage, {\n        id: \"inputSendVerification\",\n        defaultMessage: \"Send Verification\"\n      }))));\n      break;\n\n    case 'password':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, function (placeholder) {\n        return __jsx(\"input\", {\n          type: \"password\",\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          value: value ? value : state.value,\n          onChange: handleOnChange // placeholder={placeholder}\n          ,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style\n        });\n      }));\n      break;\n\n    case 'email':\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, function (placeholder) {\n        return __jsx(\"input\", _extends({\n          type: \"email\",\n          id: htmlFor,\n          name: name,\n          disabled: disabled,\n          value: value ? value : state.value,\n          onChange: handleOnChange,\n          placeholder: placeholder,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style\n        }, rest));\n      }));\n      break;\n\n    default:\n      inputElement = __jsx(\"div\", {\n        className: \"inner-wrap\"\n      }, position === 'left' && SearchIcon, __jsx(FormattedMessage, {\n        id: intlPlaceholderId ? intlPlaceholderId : 'defaultIntlId',\n        defaultMessage: \"\\xA0\"\n      }, function (placeholder) {\n        return __jsx(\"input\", _extends({\n          type: \"text\",\n          id: htmlFor,\n          name: name,\n          value: value ? value : state.value,\n          onChange: handleOnChange,\n          placeholder: placeholder,\n          onBlur: onBlur,\n          onFocus: onFocus,\n          style: style,\n          className: withSearchIconClass\n        }, rest));\n      }), position === 'right' && SearchIcon);\n      break;\n  }\n\n  return __jsx(InputWrapper, {\n    className: addAllClasses.join(' '),\n    style: containerStyle\n  }, LabelField || secondaryComponent ? __jsx(\"div\", null, LabelField, \" \", secondaryComponent) : '', inputElement);\n};\n\nexport default Input;","map":null,"metadata":{},"sourceType":"module"}