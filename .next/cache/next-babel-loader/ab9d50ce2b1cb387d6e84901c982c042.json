{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { memo } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useMeasure, usePrevious } from 'helper/hooks';\nimport { DropdownWrapper, Dropdown, Title, Content, IconWrapper } from './CategoryDropdown.style';\nimport CategoryIcon from './CategoryIcon';\n\nconst DropdownSubItem = ({\n  title,\n  activeClass,\n  onClick\n}) => {\n  return __jsx(Title, {\n    className: activeClass,\n    onClick: onClick\n  }, title);\n};\n\nconst DropdownItem = memo(({\n  activeClass,\n  title,\n  onClick,\n  isOpen,\n  children,\n  categoryIcon,\n  iconArrays\n}) => {\n  const previous = usePrevious(isOpen);\n  const [bind, {\n    height: viewHeight\n  }] = useMeasure();\n  const {\n    height,\n    opacity,\n    transform\n  } = useSpring({\n    from: {\n      height: 0,\n      opacity: 0,\n      transform: 'translate3d(25px,0,0)'\n    },\n    to: {\n      height: isOpen ? viewHeight : 0,\n      opacity: isOpen ? 1 : 0,\n      transform: `translate3d(${isOpen ? 0 : 25}px,0,0)`\n    }\n  });\n  return __jsx(Dropdown, {\n    className: isOpen ? 'open' : '',\n    isOpen: isOpen\n  }, __jsx(Title, {\n    className: activeClass,\n    onClick: onClick\n  }, categoryIcon ? __jsx(IconWrapper, null, __jsx(CategoryIcon, {\n    name: categoryIcon,\n    iconArray: iconArrays\n  })) : null, __jsx(\"span\", null, title)), __jsx(Content, {\n    style: {\n      opacity,\n      height: isOpen && previous === !isOpen ? 'auto' : height\n    }\n  }, __jsx(animated.div, _extends({\n    style: {\n      transform\n    }\n  }, bind), children)));\n});\n\nconst CategoryDropdown = ({\n  className,\n  items = [],\n  handleCategorySelection,\n  selectedQueries,\n  iconList\n}) => {\n  const addAllClasses = ['category-dropdown'];\n\n  if (className) {\n    addAllClasses.push(className);\n  }\n\n  return __jsx(DropdownWrapper, {\n    className: className\n  }, items.length !== 0 && items.map(dropdown => {\n    return __jsx(DropdownItem, {\n      key: dropdown.slug,\n      title: dropdown.title,\n      iconArrays: iconList,\n      categoryIcon: dropdown.icon,\n      activeClass: selectedQueries && selectedQueries.includes(dropdown.slug) ? 'active' : '',\n      isOpen: selectedQueries && (selectedQueries.includes(dropdown.slug) || dropdown.children.find(children => selectedQueries.includes(children.slug))),\n      onClick: () => {\n        handleCategorySelection(dropdown.slug);\n      }\n    }, dropdown.children.map(item => {\n      return __jsx(DropdownSubItem, {\n        key: item.slug,\n        title: item.title,\n        onClick: () => {\n          handleCategorySelection(item.slug);\n        },\n        activeClass: selectedQueries && selectedQueries.includes(item.slug) ? 'active' : ''\n      });\n    }));\n  }));\n};\n\nexport default CategoryDropdown;","map":null,"metadata":{},"sourceType":"module"}