{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport { DrawerProvider } from 'contexts/drawer/drawer.provider';\nimport Popover from 'components/Popover/Popover';\nimport MobileDrawer from './MobileDrawer';\nimport { MobileHeaderWrapper, MobileHeaderInnerWrapper, DrawerWrapper, LogoWrapper, SearchWrapper, SearchModalWrapper, SearchModalClose, Logo, SelectedLang, LanguageItem, LangSwithcer, Flag } from './Header.style';\nimport { FormattedMessage } from 'react-intl';\nimport SearchBox from 'components/SearchBox/SearchBox';\nimport { SearchContext } from 'contexts/search/search.context';\nimport Logoimage from 'image/logo.svg';\nimport { HOME_PAGE, GROCERY_PAGE, MAKEUP_PAGE, CLOTHING, BAGS_PAGE, FURNITURE_PAGE, BOOK_PAGE } from 'constants/navigation';\nimport LanguageContext from 'contexts/language/language.context';\nimport { SearchIcon, LongArrowLeft, DEFlag, CNFlag, USFlag, ILFlag, ESFlag, SAFlag } from 'components/AllSvgIcon';\nconst LanguageArray = [{\n  id: 'ar',\n  label: 'Arabic',\n  intlLangName: 'intlArabic',\n  icon: __jsx(SAFlag, null)\n}, {\n  id: 'zh',\n  label: 'Chinese',\n  intlLangName: 'intlChinese',\n  icon: __jsx(CNFlag, null)\n}, {\n  id: 'en',\n  label: 'English',\n  intlLangName: 'intlEnglish',\n  icon: __jsx(USFlag, null)\n}, {\n  id: 'de',\n  label: 'German',\n  intlLangName: 'intlGerman',\n  icon: __jsx(DEFlag, null)\n}, {\n  id: 'he',\n  label: 'Hebrew',\n  intlLangName: 'intlHebrew',\n  icon: __jsx(ILFlag, null)\n}, {\n  id: 'es',\n  label: 'Spanish',\n  intlLangName: 'intlSpanish',\n  icon: __jsx(ESFlag, null)\n}];\n\nconst SearchModal = ({\n  state,\n  pathname,\n  handleSearch\n}) => {\n  const router = useRouter();\n  const {\n    0: text,\n    1: setText\n  } = useState(state.text || '');\n\n  const handleSearchInput = text => {\n    setText(text);\n  };\n\n  const {\n    page\n  } = state,\n        urlState = _objectWithoutProperties(state, [\"page\"]);\n\n  const handleClickSearchButton = () => {\n    handleSearch(text);\n    router.push({\n      pathname: pathname === '/' ? '/grocery' : pathname,\n      query: _objectSpread({}, urlState, {\n        text\n      })\n    });\n    closeModal();\n  };\n\n  return __jsx(SearchModalWrapper, null, __jsx(SearchModalClose, {\n    type: \"submit\",\n    onClick: () => closeModal()\n  }, __jsx(LongArrowLeft, null)), __jsx(SearchBox, {\n    className: \"header-modal-search\",\n    bordered: false,\n    inputStyle: {\n      height: 35\n    },\n    buttonText: \"\",\n    placeholder: \"Search\",\n    handleSearch: handleSearchInput,\n    value: text,\n    onClick: handleClickSearchButton\n  }));\n};\n\nconst MobileHeader = props => {\n  const {\n    state: {\n      lang\n    },\n    toggleLanguage\n  } = useContext(LanguageContext);\n  const {\n    state,\n    dispatch\n  } = useContext(SearchContext);\n  const {\n    className,\n    pathname,\n    closeSearch\n  } = props;\n  const selectedLangindex = LanguageArray.findIndex(x => x.id === lang);\n\n  const handleSearch = text => {\n    dispatch({\n      type: 'UPDATE',\n      payload: _objectSpread({}, state, {\n        text\n      })\n    });\n  };\n\n  const handleSearchModal = () => {\n    openModal({\n      show: true,\n      config: {\n        enableResizing: false,\n        disableDragging: true,\n        className: 'search-modal-mobile',\n        width: '100%',\n        height: '100%'\n      },\n      closeOnClickOutside: false,\n      component: SearchModal,\n      componentProps: {\n        state,\n        pathname,\n        handleSearch\n      },\n      closeComponent: () => __jsx(\"div\", null)\n    });\n  };\n\n  const handleToggleLanguage = e => {\n    toggleLanguage(e.target.value);\n    console.log(e.target.value, 'switcher');\n  };\n\n  const LanguageMenu = item => {\n    return __jsx(LanguageItem, {\n      onClick: handleToggleLanguage,\n      key: item.id,\n      value: item.id\n    }, __jsx(\"span\", null, item.icon), __jsx(FormattedMessage, {\n      id: item.intlLangName,\n      defaultMessage: item.label\n    }));\n  };\n\n  const isHomePage = pathname === HOME_PAGE || pathname === GROCERY_PAGE || pathname === CLOTHING || pathname === MAKEUP_PAGE || pathname === BOOK_PAGE || pathname === FURNITURE_PAGE || pathname === BAGS_PAGE;\n  return __jsx(DrawerProvider, null, __jsx(MobileHeaderWrapper, null, __jsx(MobileHeaderInnerWrapper, {\n    className: className\n  }, __jsx(DrawerWrapper, null, __jsx(MobileDrawer, null)), __jsx(LogoWrapper, null, __jsx(Logo, null, __jsx(Link, {\n    href: HOME_PAGE\n  }, __jsx(\"a\", null, __jsx(\"img\", {\n    src: Logoimage,\n    alt: \"pickbazar-admin\"\n  }))))), __jsx(LangSwithcer, null, __jsx(Popover, {\n    className: \"right\",\n    handler: __jsx(SelectedLang, null, __jsx(Flag, {\n      style: {\n        margin: 0\n      }\n    }, LanguageArray[selectedLangindex].icon)),\n    content: __jsx(React.Fragment, null, LanguageArray.map(LanguageMenu))\n  })), isHomePage ? __jsx(SearchWrapper, {\n    onClick: handleSearchModal,\n    className: \"searchIconWrapper\"\n  }, __jsx(SearchIcon, null)) : null)));\n};\n\nexport default MobileHeader;","map":null,"metadata":{},"sourceType":"module"}