{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport Link from 'next/link';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CartContext } from 'contexts/cart/cart.context';\nimport { CartPopupBody, PopupHeader, PopupItemCount, CloseButton, ItemCards, ItemImgWrapper, ItemDetails, ItemTitle, ItemPrice, ItemWeight, TotalPrice, PromoCode, DeleteButton, CheckoutButtonWrapper, CheckoutButton, Title, PriceBox, NoProductMsg, ItemWrapper, CouponBoxWrapper, CouponCode, ErrorMsg } from './CartItemCard.style';\nimport { CloseIcon } from 'components/AllSvgIcon';\nimport { ShoppingBagLarge } from 'components/AllSvgIcon';\nimport InputNumber from 'components/InputIncDec/InputIncDec';\nimport { calculateItemPrice } from 'helper/utility';\nimport { CURRENCY } from 'helper/constant';\nimport { FormattedMessage } from 'react-intl';\nimport CouponBox from 'components/CouponBox/CouponBox';\nimport { Scrollbars } from 'react-custom-scrollbars';\nconst APPLY_COUPON = gql`\n  mutation applyCoupon($code: String!) {\n    applyCoupon(code: $code) {\n      id\n      code\n      discountInPercent\n    }\n  }\n`;\n\nconst CartItem = ({\n  product,\n  update\n}) => {\n  const itemPrice = calculateItemPrice(product);\n  return __jsx(ItemCards, {\n    key: product.id\n  }, __jsx(InputNumber, {\n    type: \"vertical\",\n    value: product.quantity,\n    onUpdate: value => update(product.id, value),\n    style: {\n      marginRight: 15\n    }\n  }), __jsx(ItemImgWrapper, null, __jsx(\"img\", {\n    className: \"ListImage\",\n    src: product.image,\n    height: \"150\",\n    width: \"150\"\n  })), __jsx(ItemDetails, null, __jsx(ItemTitle, null, product.title), __jsx(ItemPrice, null, CURRENCY, product.salePrice ? product.salePrice : product.price), __jsx(ItemWeight, null, product.quantity ? product.quantity : 1, \" x\", ' ', product.unit ? product.unit : '')), __jsx(TotalPrice, null, CURRENCY, itemPrice), __jsx(DeleteButton, {\n    onClick: () => update(product.id, 0)\n  }, __jsx(CloseIcon, null)));\n}; // For showing demo only -Ends here ... delete this codes when you work on functin code and comment out bellow codes\n\n\nconst Cart = ({\n  onCloseBtnClick,\n  scrollbarHeight\n}) => {\n  const {\n    products,\n    totalPrice,\n    update,\n    addCoupon,\n    coupon\n  } = useContext(CartContext);\n  const {\n    0: couponText,\n    1: setCoupon\n  } = useState('');\n  const {\n    0: displayCoupon,\n    1: showCoupon\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const [applyedCoupon] = useMutation(APPLY_COUPON);\n\n  const handleApplyCoupon = async () => {\n    const {\n      data: {\n        applyCoupon\n      }\n    } = await applyedCoupon({\n      variables: {\n        code: couponText\n      }\n    });\n\n    if (applyCoupon && applyCoupon.discountInPercent) {\n      setError('');\n      addCoupon(applyCoupon);\n      setCoupon('');\n    } else {\n      setError('Invalid Coupon');\n    }\n  };\n\n  const handleChange = value => {\n    setCoupon(value);\n  };\n\n  const toggleCoupon = () => {\n    showCoupon(true);\n  };\n\n  return __jsx(CartPopupBody, null, __jsx(PopupHeader, null, __jsx(PopupItemCount, null, __jsx(ShoppingBagLarge, {\n    width: \"19px\",\n    height: \"24px\"\n  }), __jsx(\"span\", null, products && products.length, ' ', products.length > 1 ? __jsx(FormattedMessage, {\n    id: \"cartItems\",\n    defaultMessage: \"items\"\n  }) : __jsx(FormattedMessage, {\n    id: \"cartItem\",\n    defaultMessage: \"item\"\n  }))), __jsx(CloseButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(CloseIcon, null))), __jsx(Scrollbars, {\n    universal: true,\n    autoHide: true,\n    autoHeight: true,\n    autoHeightMax: scrollbarHeight\n  }, __jsx(ItemWrapper, null, products && products.length ? products.map(item => __jsx(CartItem, {\n    key: `cartItem-${item.id}`,\n    update: update,\n    product: item\n  })) : __jsx(NoProductMsg, null, __jsx(FormattedMessage, {\n    id: \"noProductFound\",\n    defaultMessage: \"No products found\"\n  })))), __jsx(CheckoutButtonWrapper, null, __jsx(PromoCode, null, !coupon.discountInPercent ? __jsx(React.Fragment, null, !displayCoupon ? __jsx(\"button\", {\n    onClick: toggleCoupon\n  }, __jsx(FormattedMessage, {\n    id: \"specialCode\",\n    defaultMessage: \"Have a special code?\"\n  })) : __jsx(CouponBoxWrapper, null, __jsx(CouponBox, {\n    onUpdate: handleChange,\n    value: couponText,\n    onClick: handleApplyCoupon,\n    disabled: !couponText.length || !products.length,\n    buttonTitle: \"Apply\",\n    intlCouponBoxPlaceholder: \"couponPlaceholder\",\n    style: {\n      boxShadow: '0 3px 6px rgba(0, 0, 0, 0.06)'\n    }\n  }), error ? __jsx(ErrorMsg, null, error) : '')) : __jsx(CouponCode, null, __jsx(FormattedMessage, {\n    id: \"couponApplied\",\n    defaultMessage: \"Coupon Applied\"\n  }), __jsx(\"span\", null, coupon.code))), products.length !== 0 ? __jsx(Link, {\n    href: \"/checkout\"\n  }, __jsx(CheckoutButton, {\n    onClick: onCloseBtnClick\n  }, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, parseFloat(`${totalPrice}`).toFixed(2))))) : __jsx(CheckoutButton, null, __jsx(React.Fragment, null, __jsx(Title, null, __jsx(FormattedMessage, {\n    id: \"navlinkCheckout\",\n    defaultMessage: \"Checkout\"\n  })), __jsx(PriceBox, null, CURRENCY, parseFloat(`${totalPrice}`).toFixed(2))))));\n};\n\nexport default Cart;","map":null,"metadata":{},"sourceType":"module"}