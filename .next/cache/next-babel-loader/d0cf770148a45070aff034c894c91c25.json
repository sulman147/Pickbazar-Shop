{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport ButtonStyle from './Button.style';\nimport { FormattedMessage } from 'react-intl';\n\nconst Button = (_ref) => {\n  let {\n    type,\n    size,\n    title,\n    intlButtonId,\n    colors,\n    variant,\n    icon,\n    disabled,\n    iconPosition,\n    iconStyle,\n    onClick,\n    loader,\n    loaderColor,\n    isLoading,\n    className,\n    fullwidth,\n    style\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"type\", \"size\", \"title\", \"intlButtonId\", \"colors\", \"variant\", \"icon\", \"disabled\", \"iconPosition\", \"iconStyle\", \"onClick\", \"loader\", \"loaderColor\", \"isLoading\", \"className\", \"fullwidth\", \"style\"]);\n\n  // Checking button loading state\n  const buttonIcon = isLoading !== false ? __jsx(React.Fragment, null, loader ? loader : 'loading....') : icon && __jsx(\"span\", {\n    className: \"btn-icon\",\n    style: iconStyle\n  }, icon); // set icon position\n\n  const position = iconPosition || 'right';\n  return __jsx(ButtonStyle, _extends({\n    type: type,\n    className: `reusecore__button ${disabled ? 'disabled' : ''} ${isLoading ? 'isLoading' : ''} ${className ? className : ''}`.trim(),\n    icon: icon,\n    disabled: disabled,\n    \"icon-position\": position,\n    onClick: onClick,\n    colors: colors,\n    variant: variant,\n    fullwidth: fullwidth,\n    style: style,\n    size: size\n  }, props), position === 'left' && buttonIcon, title && !isLoading && __jsx(\"span\", {\n    className: \"btn-text\"\n  }, __jsx(FormattedMessage, {\n    id: intlButtonId ? intlButtonId : 'intlButtonId',\n    defaultMessage: title\n  })), position === 'right' && buttonIcon);\n};\n\nButton.defaultProps = {\n  disabled: false,\n  isLoading: false,\n  type: 'button'\n};\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}