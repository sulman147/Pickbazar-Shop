{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport ButtonStyle from './Button.style';\nimport { FormattedMessage } from 'react-intl';\n\nvar Button = function Button(_ref) {\n  var type = _ref.type,\n      size = _ref.size,\n      title = _ref.title,\n      intlButtonId = _ref.intlButtonId,\n      colors = _ref.colors,\n      variant = _ref.variant,\n      icon = _ref.icon,\n      disabled = _ref.disabled,\n      iconPosition = _ref.iconPosition,\n      iconStyle = _ref.iconStyle,\n      onClick = _ref.onClick,\n      loader = _ref.loader,\n      loaderColor = _ref.loaderColor,\n      isLoading = _ref.isLoading,\n      className = _ref.className,\n      fullwidth = _ref.fullwidth,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, [\"type\", \"size\", \"title\", \"intlButtonId\", \"colors\", \"variant\", \"icon\", \"disabled\", \"iconPosition\", \"iconStyle\", \"onClick\", \"loader\", \"loaderColor\", \"isLoading\", \"className\", \"fullwidth\", \"style\"]);\n\n  // Checking button loading state\n  var buttonIcon = isLoading !== false ? __jsx(React.Fragment, null, loader ? loader : 'loading....') : icon && __jsx(\"span\", {\n    className: \"btn-icon\",\n    style: iconStyle\n  }, icon); // set icon position\n\n  var position = iconPosition || 'right';\n  return __jsx(ButtonStyle, _extends({\n    type: type,\n    className: \"reusecore__button \".concat(disabled ? 'disabled' : '', \" \").concat(isLoading ? 'isLoading' : '', \" \").concat(className ? className : '').trim(),\n    icon: icon,\n    disabled: disabled,\n    \"icon-position\": position,\n    onClick: onClick,\n    colors: colors,\n    variant: variant,\n    fullwidth: fullwidth,\n    style: style,\n    size: size\n  }, props), position === 'left' && buttonIcon, title && !isLoading && __jsx(\"span\", {\n    className: \"btn-text\"\n  }, __jsx(FormattedMessage, {\n    id: intlButtonId ? intlButtonId : 'intlButtonId',\n    defaultMessage: title\n  })), position === 'right' && buttonIcon);\n};\n\nButton.defaultProps = {\n  disabled: false,\n  isLoading: false,\n  type: 'button'\n};\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}