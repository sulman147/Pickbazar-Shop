{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useReducer, useEffect } from 'react';\nimport LanguageContext from './language.context';\nimport languageReducer, { initialState } from './language.reducer';\nimport { IntlProvider } from 'react-intl';\nimport { StyleSheetManager } from 'styled-components';\nimport rtlPlugin from 'stylis-plugin-rtl';\nimport { InjectRTL } from 'styled/global.style';\n\nvar LanguageProvider = function LanguageProvider(_ref) {\n  var children = _ref.children,\n      messages = _ref.messages;\n\n  var _useReducer = useReducer(languageReducer, initialState),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var toggleLanguage = function toggleLanguage(lang) {\n    dispatch({\n      type: 'CURRENT_LANGUAGE',\n      payload: lang\n    });\n    localStorage.setItem('lang', lang);\n  };\n\n  useEffect(function () {\n    var localLang = localStorage.getItem('lang');\n\n    if (localLang) {\n      toggleLanguage(localLang);\n    } else {\n      toggleLanguage(navigator.language.split('-')[0]);\n    }\n  }, []);\n  var isRtl = state.lang === 'ar' || state.lang === 'he' ? true : false;\n  return __jsx(LanguageContext.Provider, {\n    value: {\n      state: state,\n      toggleLanguage: toggleLanguage,\n      dispatch: dispatch\n    }\n  }, __jsx(IntlProvider, {\n    locale: state.lang,\n    messages: messages[state.lang]\n  }, __jsx(InjectRTL, {\n    lang: state.lang,\n    dir: state.lang === 'ar' || state.lang === 'he' ? 'rtl' : 'ltr'\n  }, isRtl ? __jsx(StyleSheetManager, {\n    stylisPlugins: [rtlPlugin]\n  }, children) : children)));\n};\n\nexport default LanguageProvider;","map":null,"metadata":{},"sourceType":"module"}